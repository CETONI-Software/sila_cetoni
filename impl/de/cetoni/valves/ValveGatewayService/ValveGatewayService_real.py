"""
________________________________________________________________________

:PROJECT: sila_cetoni

*Valve Gateway Service*

:details: ValveGatewayService:
    Provides means to access individual valves of a valve terminal

:file:    ValveGatewayService_real.py
:authors: Florian Meinicke

:date: (creation)          2021-01-07T13:40:21.899119
:date: (last modification) 2021-01-07T13:40:21.899119

.. note:: Code generated by sila2codegenerator 0.2.0

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.1.0"

# import general packages
import logging
import time         # used for observables
import uuid         # used for observables
import grpc         # used for type hinting only
from typing import List, Tuple

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2

# import SiLA errors
from impl.common.qmix_errors import SiLAFrameworkError, SiLAFrameworkErrorType

# import gRPC modules for this feature
from .gRPC import ValveGatewayService_pb2 as ValveGatewayService_pb2
# from .gRPC import ValveGatewayService_pb2_grpc as ValveGatewayService_pb2_grpc

# import default arguments
from .ValveGatewayService_default_arguments import default_dict

from qmixsdk.qmixvalve import Valve

# noinspection PyPep8Naming,PyUnusedLocal
class ValveGatewayServiceReal:
    """
    Implementation of the *Valve Gateway Service* in *Real* mode
        Allows to control valve devices
    """

    def __init__(self, valves: List[Valve]):
        """Class initialiser"""

        logging.debug('Started server in mode: {mode}'.format(mode='Real'))

        self.valves = valves
        self.METADATA_VALVE_IDENTIFIER = \
            'sila-de.cetoni-valves-valvegatewayservice-v1-metadata-valveidentifier-bin'

    def _get_valve_name(self, metadata: Tuple[Tuple[str, str]]) -> str:
        """
        Get the requested valve name from the given `metadata`

        :param metdata: The metadata of the call. It should contain the requested valve name
        :return: The valve name if it can be obtained, otherwise a SiLAFrameworkError will be raised
        """

        invocation_metadata = {key: value for key, value in metadata}
        logging.debug(f"Received invocation metadata: {invocation_metadata}")
        return self.valves[0].get_device_name()
        try:
            return invocation_metadata[self.METADATA_VALVE_IDENTIFIER].decode('utf-8')
        except KeyError:
            raise SiLAFrameworkError(SiLAFrameworkErrorType.INVALID_METADATA,
                                     'This Command requires the ValveIdentifier metadata!')

    def get_valve(self, metadata: Tuple[Tuple[str, str]]) -> Valve:
        """
        Get the valve that is identified by the valve name given in `metadata`

        :param metdata: The metadata of the call. It should contain the requested valve name
        :return: A valid valve object if the valve can be identified, otherwise a SiLAFrameworkError will be raised
        """

        valve_name = self._get_valve_name(metadata)

        logging.debug(f"Requested valve: {valve_name}")

        for valve in self.valves:
            if valve.get_device_name() == valve_name:
                return valve
        raise SiLAFrameworkError(
            SiLAFrameworkErrorType.INVALID_METADATA,
            f"There is no valve with the name '{valve_name}!"
        )

    def Get_ValveIdentifiers(self, request, context: grpc.ServicerContext) \
            -> ValveGatewayService_pb2.Get_ValveIdentifiers_Responses:
        """
        Requests the unobservable property Valve Identifiers
            A list of all possible valve names (identifiers) of this device

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            ValveIdentifiers (Valve Identifiers): A list of all possible valve names (identifiers) of this device
        """

        return ValveGatewayService_pb2.Get_ValveIdentifiers_Responses(
                ValveIdentifiers=[
                    silaFW_pb2.String(value=valve.get_device_name()) for valve in self.valves
                ]
            )

    def Get_FCPAffectedByMetadata_ValveIdentifier(self, request, context: grpc.ServicerContext) \
            -> ValveGatewayService_pb2.Get_FCPAffectedByMetadata_ValveIdentifier_Responses:
        """
        Requests the unobservable property FCPAffectedByMetadata Valve Identifier
            Specifies which Features/Commands/Properties of the SiLA server are affected by the Valve Identifier Metadata.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            AffectedCalls (AffectedCalls): A string containing a list of Fully Qualified Identifiers of Features, Commands and Properties for which the SiLA Client Metadata is expected as part of the respective RPCs.
        """

        return ValveGatewayService_pb2.Get_FCPAffectedByMetadata_ValveIdentifier_Responses(
            AffectedCalls=[
                silaFW_pb2.String(value="ValvePositionController")
            ]
        )
