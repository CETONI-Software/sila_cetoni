#!/usr/bin/env python3
"""
________________________________________________________________________

:PROJECT: sila_cetoni

*QmixIO client*

:details: QmixIO:
    The SiLA 2 driver for Qmix I/O Devices

:file:    DigitalInChannelProvider_client.py
:authors: Florian Meinicke

:date: (creation)          2021-07-08T11:44:14.635131
:date: (last modification) 2021-07-08T11:44:14.635131

.. note:: Code generated by sila2codegenerator 0.3.6

_______________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""
__version__ = "0.1.0"

# import general packages
import logging
import argparse
import grpc
import time
import datetime

# import meta packages
from typing import Union, Optional

# import SiLA2 library modules
from sila2lib.framework import SiLAFramework_pb2 as silaFW_pb2
from sila2lib.sila_client import SiLA2Client
from sila2lib.framework.std_features import SiLAService_pb2 as SiLAService_feature_pb2
from sila2lib.error_handling import client_err
from sila2lib.error_handling.client_err import SiLAClientError
import sila2lib.utils.py2sila_types as p2s
#   Usually not needed, but - feel free to modify
# from sila2lib.framework.std_features import SimulationController_pb2 as SimController_feature_pb2

# import feature gRPC modules
# Import gRPC libraries of features
from AnalogInChannelProvider.gRPC import AnalogInChannelProvider_pb2
from AnalogInChannelProvider.gRPC import AnalogInChannelProvider_pb2_grpc
# import default arguments for this feature
from AnalogInChannelProvider.AnalogInChannelProvider_default_arguments import default_dict as AnalogInChannelProvider_default_dict
from AnalogOutChannelController.gRPC import AnalogOutChannelController_pb2
from AnalogOutChannelController.gRPC import AnalogOutChannelController_pb2_grpc
# import default arguments for this feature
from AnalogOutChannelController.AnalogOutChannelController_default_arguments import default_dict as AnalogOutChannelController_default_dict
from DigitalInChannelProvider.gRPC import DigitalInChannelProvider_pb2
from DigitalInChannelProvider.gRPC import DigitalInChannelProvider_pb2_grpc
# import default arguments for this feature
from DigitalInChannelProvider.DigitalInChannelProvider_default_arguments import default_dict as DigitalInChannelProvider_default_dict
from DigitalOutChannelController.gRPC import DigitalOutChannelController_pb2
from DigitalOutChannelController.gRPC import DigitalOutChannelController_pb2_grpc
# import default arguments for this feature
from DigitalOutChannelController.DigitalOutChannelController_default_arguments import default_dict as DigitalOutChannelController_default_dict


# noinspection PyPep8Naming, PyUnusedLocal
class DigitalInChannelProviderClient:
    """
        The SiLA 2 driver for Qmix I/O Devices

    .. note:: For an example on how to construct the parameter or read the response(s) for command calls and properties,
              compare the default dictionary that is stored in the directory of the corresponding feature.
    """
    # The following variables will be filled when run() is executed
    #: Storage for the connected servers version
    server_version: str = ''
    #: Storage for the display name of the connected server
    server_display_name: str = ''
    #: Storage for the description of the connected server
    server_description: str = ''

    def __init__(self,
                 channel = None):
        """Class initialiser"""

        # Create stub objects used to communicate with the server
        self.DigitalInChannelProvider_stub = \
            DigitalInChannelProvider_pb2_grpc.DigitalInChannelProviderStub(channel)


        # initialise class variables for server information storage
        self.server_version = ''
        self.server_display_name = ''
        self.server_description = ''



    def Get_NumberOfChannels(self) \
            -> DigitalInChannelProvider_pb2.Get_NumberOfChannels_Responses:
        """Wrapper to get property NumberOfChannels from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading unobservable property NumberOfChannels:")
        try:
            response = self.DigitalInChannelProvider_stub.Get_NumberOfChannels(
                DigitalInChannelProvider_pb2.Get_NumberOfChannels_Parameters()
            )
            logging.debug(
                'Get_NumberOfChannels response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response.NumberOfChannels

    def Subscribe_State(self) \
            -> DigitalInChannelProvider_pb2.Subscribe_State_Responses:
        """Wrapper to get property State from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading observable property State:")
        try:
            response = self.DigitalInChannelProvider_stub.Subscribe_State(
                DigitalInChannelProvider_pb2.Subscribe_State_Parameters()
            )
            logging.debug(
                'Subscribe_State response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response


    def Get_FCPAffectedByMetadata_ChannelIndex(self) \
            -> DigitalInChannelProvider_pb2.Get_FCPAffectedByMetadata_ChannelIndex_Responses:
        """Wrapper to get property FCPAffectedByMetadata_ChannelIndex from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading unobservable property FCPAffectedByMetadata_ChannelIndex:")
        try:
            response = self.DigitalInChannelProvider_stub.Get_FCPAffectedByMetadata_ChannelIndex(
                DigitalInChannelProvider_pb2.Get_FCPAffectedByMetadata_ChannelIndex_Parameters()
            )
            logging.debug(
                'Get_FCPAffectedByMetadata_ChannelIndex response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response.AffectedCalls



    @staticmethod
    def grpc_error_handling(error_object: grpc.Call) -> None:
        """Handles exceptions of type grpc.RpcError"""
        # pass to the default error handling
        grpc_error =  client_err.grpc_error_handling(error_object=error_object)

        logging.error(grpc_error.error_type)
        if hasattr(grpc_error.message, "parameter"):
            logging.error(grpc_error.message.parameter)
        logging.error(grpc_error.message.message)
        if grpc_error.error_type == client_err.SiLAError.DEFINED_EXECUTION_ERROR:
          if grpc_error.message.errorIdentifier == 'InvalidChannelIndex' :
            raise InvalidChannelIndexError(grpc_error.message.message)


class InvalidChannelIndexError(SiLAClientError):
    """Invalid Channel Index
    """
    pass


