"""
________________________________________________________________________

:PROJECT: sila_cetoni

*Digital Out Channel Controller*

:details: DigitalOutChannelController:
    Allows to control one digital out channel of an I/O module

:file:    DigitalOutChannelController_simulation.py
:authors: Florian Meinicke

:date: (creation)          2020-12-08T14:25:47.309795
:date: (last modification) 2020-12-08T14:25:47.309795

.. note:: Code generated by sila2codegenerator 0.2.0

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.1.0"

# import general packages
import logging
import time         # used for observables
import uuid         # used for observables
import grpc         # used for type hinting only

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2

# import gRPC modules for this feature
from .gRPC import DigitalOutChannelController_pb2 as DigitalOutChannelController_pb2
# from .gRPC import DigitalOutChannelController_pb2_grpc as DigitalOutChannelController_pb2_grpc

# import default arguments
from .DigitalOutChannelController_default_arguments import default_dict


# noinspection PyPep8Naming,PyUnusedLocal
class DigitalOutChannelControllerSimulation:
    """
    Implementation of the *Digital Out Channel Controller* in *Simulation* mode
        The SiLA 2 driver for Qmix I/O Devices
    """

    def __init__(self):
        """Class initialiser"""

        logging.debug('Started server in mode: {mode}'.format(mode='Simulation'))

    def _get_command_state(self, command_uuid: str) -> silaFW_pb2.ExecutionInfo:
        """
        Method to fill an ExecutionInfo message from the SiLA server for observable commands

        :param command_uuid: The uuid of the command for which to return the current state

        :return: An execution info object with the current command state
        """

        #: Enumeration of silaFW_pb2.ExecutionInfo.CommandStatus
        command_status = silaFW_pb2.ExecutionInfo.CommandStatus.waiting
        #: Real silaFW_pb2.Real(0...1)
        command_progress = None
        #: Duration silaFW_pb2.Duration(seconds=<seconds>, nanos=<nanos>)
        command_estimated_remaining = None
        #: Duration silaFW_pb2.Duration(seconds=<seconds>, nanos=<nanos>)
        command_lifetime_of_execution = None

        # TODO: check the state of the command with the given uuid and return the correct information

        # just return a default in this example
        return silaFW_pb2.ExecutionInfo(
            commandStatus=command_status,
            progressInfo=(
                command_progress if command_progress is not None else None
            ),
            estimatedRemainingTime=(
                command_estimated_remaining if command_estimated_remaining is not None else None
            ),
            updatedLifetimeOfExecution=(
                command_lifetime_of_execution if command_lifetime_of_execution is not None else None
            )
        )

    def SetOutput(self, request, context: grpc.ServicerContext) \
            -> DigitalOutChannelController_pb2.SetOutput_Responses:
        """
        Executes the unobservable command "Set Output"
            Switch a digital output channel on or off.

        :param request: gRPC request containing the parameters passed:
            request.State (State): The state to set.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        # initialise the return value
        return_value = None

        # TODO:
        #   Add implementation of Simulation for command SetOutput here and write the resulting response
        #   in return_value

        # fallback to default
        if return_value is None:
            return_value = DigitalOutChannelController_pb2.SetOutput_Responses(
                **default_dict['SetOutput_Responses']
            )

        return return_value


    def Subscribe_State(self, request, context: grpc.ServicerContext) \
            -> DigitalOutChannelController_pb2.Subscribe_State_Responses:
        """
        Requests the observable property State
            The state of the channel.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            request.State (State): The state of the channel.
        """

        # initialise the return value
        return_value: DigitalOutChannelController_pb2.Subscribe_State_Responses = None

        # we could use a timeout here if we wanted
        while True:
            # TODO:
            #   Add implementation of Simulation for property State here and write the resulting
            #   response in return_value

            # create the default value
            if return_value is None:
                return_value = DigitalOutChannelController_pb2.Subscribe_State_Responses(
                    **default_dict['Subscribe_State_Responses']
                )


            yield return_value

