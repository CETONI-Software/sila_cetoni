# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import DigitalOutChannelController_pb2 as DigitalOutChannelController__pb2


class DigitalOutChannelControllerStub(object):
    """Feature: Digital Out Channel Controller
    Allows to control one digital out channel of an I/O module
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetOutput = channel.unary_unary(
                '/sila2.de.cetoni.io.digitaloutchannelcontroller.v1.DigitalOutChannelController/SetOutput',
                request_serializer=DigitalOutChannelController__pb2.SetOutput_Parameters.SerializeToString,
                response_deserializer=DigitalOutChannelController__pb2.SetOutput_Responses.FromString,
                )
        self.Subscribe_State = channel.unary_stream(
                '/sila2.de.cetoni.io.digitaloutchannelcontroller.v1.DigitalOutChannelController/Subscribe_State',
                request_serializer=DigitalOutChannelController__pb2.Subscribe_State_Parameters.SerializeToString,
                response_deserializer=DigitalOutChannelController__pb2.Subscribe_State_Responses.FromString,
                )


class DigitalOutChannelControllerServicer(object):
    """Feature: Digital Out Channel Controller
    Allows to control one digital out channel of an I/O module
    """

    def SetOutput(self, request, context):
        """Set Output
        Switch a digital output channel on or off.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_State(self, request, context):
        """State
        The state of the channel.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DigitalOutChannelControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOutput,
                    request_deserializer=DigitalOutChannelController__pb2.SetOutput_Parameters.FromString,
                    response_serializer=DigitalOutChannelController__pb2.SetOutput_Responses.SerializeToString,
            ),
            'Subscribe_State': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_State,
                    request_deserializer=DigitalOutChannelController__pb2.Subscribe_State_Parameters.FromString,
                    response_serializer=DigitalOutChannelController__pb2.Subscribe_State_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.de.cetoni.io.digitaloutchannelcontroller.v1.DigitalOutChannelController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DigitalOutChannelController(object):
    """Feature: Digital Out Channel Controller
    Allows to control one digital out channel of an I/O module
    """

    @staticmethod
    def SetOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.io.digitaloutchannelcontroller.v1.DigitalOutChannelController/SetOutput',
            DigitalOutChannelController__pb2.SetOutput_Parameters.SerializeToString,
            DigitalOutChannelController__pb2.SetOutput_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_State(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.io.digitaloutchannelcontroller.v1.DigitalOutChannelController/Subscribe_State',
            DigitalOutChannelController__pb2.Subscribe_State_Parameters.SerializeToString,
            DigitalOutChannelController__pb2.Subscribe_State_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
