"""
________________________________________________________________________

:PROJECT: SiLA2_python

*Continuous Flow Configuration Service*

:details: ContinuousFlowConfigurationService:
    Allows to configure the parameters of a continuous flow pump.

:file:    ContinuousFlowConfigurationService_real.py
:authors: Florian Meinicke

:date: (creation)          2020-10-22T07:15:50.362846
:date: (last modification) 2020-10-22T07:15:50.362846

.. note:: Code generated by sila2codegenerator 0.3.2.dev

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.1.0"

# import general packages
import logging
import time         # used for observables
import uuid         # used for observables
import grpc
from sila2lib.error_handling.server_err import SiLAValidationError         # used for type hinting only

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2

# import gRPC modules for this feature
from .gRPC import ContinuousFlowConfigurationService_pb2 as ContinuousFlowConfigurationService_pb2
# from .gRPC import ContinuousFlowConfigurationService_pb2_grpc as ContinuousFlowConfigurationService_pb2_grpc

# import default arguments
from .ContinuousFlowConfigurationService_default_arguments import default_dict

# import qmixsdk
from qmixsdk.qmixpump import *


def invert_dict(d: dict) -> dict:
    return dict([(v, k) for k, v in d.items()])

# noinspection PyPep8Naming,PyUnusedLocal
class ContinuousFlowConfigurationServiceReal:
    """
    Implementation of the *Continuous Flow Configuration Service* in *Real* mode
        Allows to control a continuous flow pumps that is made up of two syringe pumps
    """

    def __init__(self, pump: ContiFlowPump, simulation_mode: bool = True):
        """
        Class initialiser.

        :param pump: A valid `qxmixpump.ContiFlowPump` for this service to use
        :param simulation_mode: Sets whether at initialisation the simulation mode is active or the real mode.
        """

        self.pump = pump

        self.ALLOWED_SWITCHING_MODES = {
            'SwitchingCrossFlow': ContiFlowSwitchingMode.CROSS_FLOW
            # more to come
        }

        logging.debug('Started server in mode: {mode}'.format(mode='Real'))

    def SetSwitchingMode(self, request, context: grpc.ServicerContext) \
            -> ContinuousFlowConfigurationService_pb2.SetSwitchingMode_Responses:
        """
        Executes the unobservable command "Set Switching Mode"
            Sets the switching mode for syringe pump switchover if one syringe pump runs empty.

        :param request: gRPC request containing the parameters passed:
            request.SwitchingMode (Switching Mode): The new switching mode to set
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        try:
            self.pump.set_device_property(ContiFlowProperty.SWITCHING_MODE,
                                        self.ALLOWED_SWITCHING_MODES.get(request.value.value))
        except KeyError:
            raise SiLAValidationError(
                'SwitchingMode',
                'The given value for the Contiflow Switching Mode is invalid. Allowed values are: {}'.format(
                    ', '.join(self.ALLOWED_SWITCHING_MODES.keys())
                )
            )

        return ContinuousFlowConfigurationService_pb2.SetSwitchingMode_Responses()


    def SetRefillFlowRate(self, request, context: grpc.ServicerContext) \
            -> ContinuousFlowConfigurationService_pb2.SetRefillFlowRate_Responses:
        """
        Executes the unobservable command "Set Refill Flow Rate"
            Set the refill flow rate for the continuous flow pump. The refill flow speed limits the maximum flow that is possible with a contiflow pump.

        :param request: gRPC request containing the parameters passed:
            request.RefillFlowRate (Refill Flow Rate): The refill flow rate to set
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        self.pump.set_device_property(ContiFlowProperty.REFILL_FLOW, request.value.value)

        return ContinuousFlowConfigurationService_pb2.SetRefillFlowRate_Responses()


    def SetCrossFlowDuration(self, request, context: grpc.ServicerContext) \
            -> ContinuousFlowConfigurationService_pb2.SetCrossFlowDuration_Responses:
        """
        Executes the unobservable command "Set Cross Flow Duration"
            Set the cross flow duration for the continuous flow pump. The cross flow duration is the time the pump running empty decelerates while the filled pump accelerates.

        :param request: gRPC request containing the parameters passed:
            request.CrossFlowDuration (Cross Flow Duration): The cross flow duration to set
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        self.pump.set_device_property(ContiFlowProperty.CROSSFLOW_DURATION_S, request.value.value)

        return ContinuousFlowConfigurationService_pb2.SetCrossFlowDuration_Responses()


    def SetOverlapDuration(self, request, context: grpc.ServicerContext) \
            -> ContinuousFlowConfigurationService_pb2.SetOverlapDuration_Responses:
        """
        Executes the unobservable command "Set Overlap Duration"
            Set the overlap duration for the continuous flow pump. The overlap duration is a time the refilled pump will start earlier than the empty pump stops. You can use this time to ensure that the system is already pressurized when switching over.

        :param request: gRPC request containing the parameters passed:
            request.OverlapDuration (Overlap Duration): The overlap duration to set
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        self.pump.set_device_property(ContiFlowProperty.OVERLAP_DURATION_S, request.value.value)

        return ContinuousFlowConfigurationService_pb2.SetOverlapDuration_Responses()


    def Subscribe_SwitchingMode(self, request, context: grpc.ServicerContext) \
            -> ContinuousFlowConfigurationService_pb2.Subscribe_SwitchingMode_Responses:
        """
        Requests the observable property Switching Mode
            Get the switching mode for syringe pump switchover if one syringe pump runs empty.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            request.SwitchingMode (Switching Mode): Get the switching mode for syringe pump switchover if one syringe pump runs empty.
        """

        while True:
            switching_mode = self.pump.get_device_property(ContiFlowProperty.SWITCHING_MODE)
            yield ContinuousFlowConfigurationService_pb2.Subscribe_SwitchingMode_Responses(
                SwitchingMode=silaFW_pb2.String(value=invert_dict(self.ALLOWED_SWITCHING_MODES)[switching_mode])
            )

            time.sleep(0.5) # give client a chance to keep up


    def Subscribe_MaxRefillFlowRate(self, request, context: grpc.ServicerContext) \
            -> ContinuousFlowConfigurationService_pb2.Subscribe_MaxRefillFlowRate_Responses:
        """
        Requests the observable property Max Refill Flow Rate
            Get the maximum possible refill flow rate for the continuous flow pump.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            request.MaxRefillFlowRate (Max Refill Flow Rate): Get the maximum possible refill flow rate for the continuous flow pump.
        """

        while True:
            max_flow = self.pump.get_device_property(ContiFlowProperty.MAX_REFILL_FLOW)
            yield ContinuousFlowConfigurationService_pb2.Subscribe_MaxRefillFlowRate_Responses(
                MaxRefillFlowRate=silaFW_pb2.Real(value=max_flow)
            )

            time.sleep(0.5) # give client a chance to keep up


    def Subscribe_RefillFlowRate(self, request, context: grpc.ServicerContext) \
            -> ContinuousFlowConfigurationService_pb2.Subscribe_RefillFlowRate_Responses:
        """
        Requests the observable property Refill Flow Rate
            Get the refill flow rate for the continuous flow pump.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            request.RefillFlowRate (Refill Flow Rate): Get the refill flow rate for the continuous flow pump.
        """

        while True:
            refill_flow = self.pump.get_device_property(ContiFlowProperty.REFILL_FLOW)
            yield ContinuousFlowConfigurationService_pb2.Subscribe_RefillFlowRate_Responses(
                RefillFlowRate=silaFW_pb2.Real(value=refill_flow)
            )

            time.sleep(0.5) # give client a chance to keep up


    def Subscribe_MinFlowRate(self, request, context: grpc.ServicerContext) \
            -> ContinuousFlowConfigurationService_pb2.Subscribe_MinFlowRate_Responses:
        """
        Requests the observable property Min Flow Rate
            Get the minimum flow rate that is theoretically possible with the continuous flow pump.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            request.MinFlowRate (Min Flow Rate): Get the minimum flow rate that is theoretically possible with the continuous flow pump.
        """

        while True:
            min_flow = self.pump.get_device_property(ContiFlowProperty.MIN_PUMP_FLOW)
            yield ContinuousFlowConfigurationService_pb2.Subscribe_MinFlowRate_Responses(
                MinFlowRate=silaFW_pb2.Real(value=min_flow)
            )

            time.sleep(0.5) # give client a chance to keep up


    def Subscribe_CrossFlowDuration(self, request, context: grpc.ServicerContext) \
            -> ContinuousFlowConfigurationService_pb2.Subscribe_CrossFlowDuration_Responses:
        """
        Requests the observable property Cross Flow Duration
            Get the cross flow duration for the continuous flow pump.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            request.CrossFlowDuration (Cross Flow Duration): Get the cross flow duration for the continuous flow pump.
        """

        while True:
            cross_duration = self.pump.get_device_property(ContiFlowProperty.CROSSFLOW_DURATION_S)
            yield ContinuousFlowConfigurationService_pb2.Subscribe_CrossFlowDuration_Responses(
                CrossFlowDuration=silaFW_pb2.Real(value=cross_duration)
            )

            time.sleep(0.5) # give client a chance to keep up



    def Subscribe_OverlapDuration(self, request, context: grpc.ServicerContext) \
            -> ContinuousFlowConfigurationService_pb2.Subscribe_OverlapDuration_Responses:
        """
        Requests the observable property Overlap Duration
            Get the overlap duration for the continuous flow pump.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            request.OverlapDuration (Overlap Duration): Get the overlap duration for the continuous flow pump.
        """

        while True:
            overlap_duration = self.pump.get_device_property(ContiFlowProperty.OVERLAP_DURATION_S)
            yield ContinuousFlowConfigurationService_pb2.Subscribe_OverlapDuration_Responses(
                OverlapDuration=silaFW_pb2.Real(value=overlap_duration)
            )

            time.sleep(0.5) # give client a chance to keep up


