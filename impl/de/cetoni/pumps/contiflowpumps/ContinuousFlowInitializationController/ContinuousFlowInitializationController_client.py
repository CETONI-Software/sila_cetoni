#!/usr/bin/env python3
"""
________________________________________________________________________

:PROJECT: sila_cetoni

*Contiflow client*

:details: Contiflow:
    Allows to control a continuous flow pump that is made up of two syringe pumps

:file:    ContinuousFlowInitializationController_client.py
:authors: Florian Meinicke

:date: (creation)          2021-07-10T10:33:25.077586
:date: (last modification) 2021-07-10T10:33:25.077586

.. note:: Code generated by sila2codegenerator 0.3.6

_______________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""
__version__ = "0.1.0"

# import general packages
import logging
import argparse
import grpc
import time
import datetime

# import meta packages
from typing import Union, Optional

# import SiLA2 library modules
from sila2lib.framework import SiLAFramework_pb2 as silaFW_pb2
from sila2lib.sila_client import SiLA2Client
from sila2lib.framework.std_features import SiLAService_pb2 as SiLAService_feature_pb2
from sila2lib.error_handling import client_err
from sila2lib.error_handling.client_err import SiLAClientError
import sila2lib.utils.py2sila_types as p2s
#   Usually not needed, but - feel free to modify
# from sila2lib.framework.std_features import SimulationController_pb2 as SimController_feature_pb2

# import feature gRPC modules
# Import gRPC libraries of features
from .gRPC import ContinuousFlowInitializationController_pb2
from .gRPC import ContinuousFlowInitializationController_pb2_grpc
# import default arguments for this feature
from .ContinuousFlowInitializationController_default_arguments import default_dict as ContinuousFlowInitializationController_default_dict


# noinspection PyPep8Naming, PyUnusedLocal
class ContinuousFlowInitializationControllerClient:
    """
        Allows to control a continuous flow pump that is made up of two syringe pumps

    .. note:: For an example on how to construct the parameter or read the response(s) for command calls and properties,
              compare the default dictionary that is stored in the directory of the corresponding feature.
    """
    # The following variables will be filled when run() is executed
    #: Storage for the connected servers version
    server_version: str = ''
    #: Storage for the display name of the connected server
    server_display_name: str = ''
    #: Storage for the description of the connected server
    server_description: str = ''

    def __init__(self,
                 channel = None):
        """Class initialiser"""

        # Create stub objects used to communicate with the server
        self.ContinuousFlowInitializationController_stub = \
            ContinuousFlowInitializationController_pb2_grpc.ContinuousFlowInitializationControllerStub(channel)


        # initialise class variables for server information storage
        self.server_version = ''
        self.server_display_name = ''
        self.server_description = ''

    def InitializeContiflow(self) \
            -> silaFW_pb2.CommandConfirmation:
        """
        Wrapper to call the observable command InitializeContiflow on the server.

        :returns: A command confirmation object with the following information:
            commandExecutionUUID: A command id with which this observable command can be referenced in future calls
            lifetimeOfExecution (optional): The (maximum) lifetime of this command call.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Calling InitializeContiflow:")
        try:
            response = self.ContinuousFlowInitializationController_stub.InitializeContiflow(
                ContinuousFlowInitializationController_pb2.InitializeContiflow_Parameters()
            )

            logging.debug('InitializeContiflow response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def InitializeContiflow_Info(self,
                                 uuid: Union[str, silaFW_pb2.CommandExecutionUUID]) \
            -> silaFW_pb2.ExecutionInfo:
        """
        Wrapper to get an intermediate response for the observable command InitializeContiflow on the server.

        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.

        :returns: A gRPC object with the status information that has been defined for this command. The following fields
                  are defined:
                    * *commandStatus*: Status of the command (enumeration)
                    * *progressInfo*: Information on the progress of the command (0 to 1)
                    * *estimatedRemainingTime*: Estimate of the remaining time required to run the command
                    * *updatedLifetimeOfExecution*: An update on the execution lifetime
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        if type(uuid) is str:
            uuid = silaFW_pb2.CommandExecutionUUID(value=uuid)

        logging.debug(
            "Requesting status information for command InitializeContiflow (UUID={uuid}):".format(
                uuid=uuid.value
            )
        )
        try:
            response = self.ContinuousFlowInitializationController_stub.InitializeContiflow_Info(uuid)
            logging.debug('InitializeContiflow status information: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def InitializeContiflow_Result(self,
                                   uuid: Union[str, silaFW_pb2.CommandExecutionUUID]) \
            -> ContinuousFlowInitializationController_pb2.InitializeContiflow_Responses:
        """
        Wrapper to get an intermediate response for the observable command InitializeContiflow on the server.

        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.

        :returns: A gRPC object with the result response that has been defined for this command.

        .. note:: Whether the result is available or not can and should be evaluated by calling the
                  :meth:`InitializeContiflow_Info` method of this call.
        """
        if type(uuid) is str:
            uuid = silaFW_pb2.CommandExecutionUUID(value=uuid)

        logging.debug(
            "Requesting status information for command InitializeContiflow (UUID={uuid}):".format(
                uuid=uuid.value
            )
        )

        try:
            response = self.ContinuousFlowInitializationController_stub.InitializeContiflow_Result(uuid)
            logging.debug('InitializeContiflow result response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response


    def Subscribe_IsInitialized(self) \
            -> ContinuousFlowInitializationController_pb2.Subscribe_IsInitialized_Responses:
        """Wrapper to get property IsInitialized from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading observable property IsInitialized:")
        try:
            response = self.ContinuousFlowInitializationController_stub.Subscribe_IsInitialized(
                ContinuousFlowInitializationController_pb2.Subscribe_IsInitialized_Parameters()
            )
            logging.debug(
                'Subscribe_IsInitialized response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response


    #   No metadata defined

    @staticmethod
    def grpc_error_handling(error_object: grpc.Call) -> None:
        """Handles exceptions of type grpc.RpcError"""
        # pass to the default error handling
        grpc_error =  client_err.grpc_error_handling(error_object=error_object)

        logging.error(grpc_error.error_type)
        if hasattr(grpc_error.message, "parameter"):
            logging.error(grpc_error.message.parameter)
        logging.error(grpc_error.message.message)


