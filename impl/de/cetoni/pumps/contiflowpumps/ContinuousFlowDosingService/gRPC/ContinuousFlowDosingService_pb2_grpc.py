# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import ContinuousFlowDosingService_pb2 as ContinuousFlowDosingService__pb2
import sila2lib.framework.SiLAFramework_pb2 as SiLAFramework__pb2


class ContinuousFlowDosingServiceStub(object):
    """Feature: Continuous Flow Dosing Service

    Allows to continuously dose a specified fluid.
    The continuous flow mode is meant for dispensing volumes or generating flows and works only in one direction. That means
    using negative flow rates or negative volumes for aspiration is not possible.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateFlow = channel.unary_unary(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowdosingservice.v1.ContinuousFlowDosingService/GenerateFlow',
                request_serializer=ContinuousFlowDosingService__pb2.GenerateFlow_Parameters.SerializeToString,
                response_deserializer=SiLAFramework__pb2.CommandConfirmation.FromString,
                )
        self.GenerateFlow_Info = channel.unary_stream(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowdosingservice.v1.ContinuousFlowDosingService/GenerateFlow_Info',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=SiLAFramework__pb2.ExecutionInfo.FromString,
                )
        self.GenerateFlow_Result = channel.unary_unary(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowdosingservice.v1.ContinuousFlowDosingService/GenerateFlow_Result',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=ContinuousFlowDosingService__pb2.GenerateFlow_Responses.FromString,
                )
        self.StopDosage = channel.unary_unary(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowdosingservice.v1.ContinuousFlowDosingService/StopDosage',
                request_serializer=ContinuousFlowDosingService__pb2.StopDosage_Parameters.SerializeToString,
                response_deserializer=ContinuousFlowDosingService__pb2.StopDosage_Responses.FromString,
                )
        self.Subscribe_MaxFlowRate = channel.unary_stream(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowdosingservice.v1.ContinuousFlowDosingService/Subscribe_MaxFlowRate',
                request_serializer=ContinuousFlowDosingService__pb2.Subscribe_MaxFlowRate_Parameters.SerializeToString,
                response_deserializer=ContinuousFlowDosingService__pb2.Subscribe_MaxFlowRate_Responses.FromString,
                )
        self.Subscribe_FlowRate = channel.unary_stream(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowdosingservice.v1.ContinuousFlowDosingService/Subscribe_FlowRate',
                request_serializer=ContinuousFlowDosingService__pb2.Subscribe_FlowRate_Parameters.SerializeToString,
                response_deserializer=ContinuousFlowDosingService__pb2.Subscribe_FlowRate_Responses.FromString,
                )


class ContinuousFlowDosingServiceServicer(object):
    """Feature: Continuous Flow Dosing Service

    Allows to continuously dose a specified fluid.
    The continuous flow mode is meant for dispensing volumes or generating flows and works only in one direction. That means
    using negative flow rates or negative volumes for aspiration is not possible.

    """

    def GenerateFlow(self, request, context):
        """Generate Flow
        Generate a continous flow with the given flow rate. Dosing continues until it gets stopped manually by calling
        StopDosage.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateFlow_Info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateFlow_Result(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopDosage(self, request, context):
        """Stop Dosage
        Stops a currently running dosage immediately.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_MaxFlowRate(self, request, context):
        """Maximum Flow Rate
        The maximum value of the flow rate at which this pump can dose a fluid.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_FlowRate(self, request, context):
        """Flow Rate
        The current value of the flow rate. It is 0 if the pump does not dose any fluid.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ContinuousFlowDosingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateFlow': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateFlow,
                    request_deserializer=ContinuousFlowDosingService__pb2.GenerateFlow_Parameters.FromString,
                    response_serializer=SiLAFramework__pb2.CommandConfirmation.SerializeToString,
            ),
            'GenerateFlow_Info': grpc.unary_stream_rpc_method_handler(
                    servicer.GenerateFlow_Info,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=SiLAFramework__pb2.ExecutionInfo.SerializeToString,
            ),
            'GenerateFlow_Result': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateFlow_Result,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=ContinuousFlowDosingService__pb2.GenerateFlow_Responses.SerializeToString,
            ),
            'StopDosage': grpc.unary_unary_rpc_method_handler(
                    servicer.StopDosage,
                    request_deserializer=ContinuousFlowDosingService__pb2.StopDosage_Parameters.FromString,
                    response_serializer=ContinuousFlowDosingService__pb2.StopDosage_Responses.SerializeToString,
            ),
            'Subscribe_MaxFlowRate': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_MaxFlowRate,
                    request_deserializer=ContinuousFlowDosingService__pb2.Subscribe_MaxFlowRate_Parameters.FromString,
                    response_serializer=ContinuousFlowDosingService__pb2.Subscribe_MaxFlowRate_Responses.SerializeToString,
            ),
            'Subscribe_FlowRate': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_FlowRate,
                    request_deserializer=ContinuousFlowDosingService__pb2.Subscribe_FlowRate_Parameters.FromString,
                    response_serializer=ContinuousFlowDosingService__pb2.Subscribe_FlowRate_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.de.cetoni.pumps.contiflowpumps.continuousflowdosingservice.v1.ContinuousFlowDosingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ContinuousFlowDosingService(object):
    """Feature: Continuous Flow Dosing Service

    Allows to continuously dose a specified fluid.
    The continuous flow mode is meant for dispensing volumes or generating flows and works only in one direction. That means
    using negative flow rates or negative volumes for aspiration is not possible.

    """

    @staticmethod
    def GenerateFlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowdosingservice.v1.ContinuousFlowDosingService/GenerateFlow',
            ContinuousFlowDosingService__pb2.GenerateFlow_Parameters.SerializeToString,
            SiLAFramework__pb2.CommandConfirmation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateFlow_Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowdosingservice.v1.ContinuousFlowDosingService/GenerateFlow_Info',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            SiLAFramework__pb2.ExecutionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateFlow_Result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowdosingservice.v1.ContinuousFlowDosingService/GenerateFlow_Result',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            ContinuousFlowDosingService__pb2.GenerateFlow_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopDosage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowdosingservice.v1.ContinuousFlowDosingService/StopDosage',
            ContinuousFlowDosingService__pb2.StopDosage_Parameters.SerializeToString,
            ContinuousFlowDosingService__pb2.StopDosage_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_MaxFlowRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowdosingservice.v1.ContinuousFlowDosingService/Subscribe_MaxFlowRate',
            ContinuousFlowDosingService__pb2.Subscribe_MaxFlowRate_Parameters.SerializeToString,
            ContinuousFlowDosingService__pb2.Subscribe_MaxFlowRate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_FlowRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowdosingservice.v1.ContinuousFlowDosingService/Subscribe_FlowRate',
            ContinuousFlowDosingService__pb2.Subscribe_FlowRate_Parameters.SerializeToString,
            ContinuousFlowDosingService__pb2.Subscribe_FlowRate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
