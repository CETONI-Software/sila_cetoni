"""
________________________________________________________________________

:PROJECT: sila_cetoni

*I/O Channel Gateway Service*

:details: ChannelGatewayService:
    This feature provides gateway functionality for the other I/O Features.

:file:    ChannelGatewayService_servicer.py
:authors: Florian Meinicke

:date: (creation)          2020-12-10T10:35:03.371010
:date: (last modification) 2020-12-10T10:35:03.371010

.. note:: Code generated by sila2codegenerator 0.2.0

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.1.0"

# import general packages
import logging
import grpc

# meta packages
from typing import List, Union, Tuple

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2
from sila2lib.error_handling.server_err import SiLAError

# import gRPC modules for this feature
from .gRPC import ChannelGatewayService_pb2 as ChannelGatewayService_pb2
from .gRPC import ChannelGatewayService_pb2_grpc as ChannelGatewayService_pb2_grpc

# import simulation and real implementation
from .ChannelGatewayService_simulation import ChannelGatewayServiceSimulation
from .ChannelGatewayService_real import ChannelGatewayServiceReal


class ChannelGatewayService(ChannelGatewayService_pb2_grpc.ChannelGatewayServiceServicer):
    """
    The SiLA 2 driver for Qmix I/O Devices
    """
    implementation: Union[ChannelGatewayServiceSimulation, ChannelGatewayServiceReal]
    simulation_mode: bool

    def __init__(self, channels: List, simulation_mode: bool = True):
        """
        Class initialiser.

        :param io_channels: All I/O channels of all I/O devices that are connected to the bus
        :param simulation_mode: Sets whether at initialisation the simulation mode is active or the real mode.
        """

        self.channels = channels
        self.simulation_mode = simulation_mode
        if simulation_mode:
            self.switch_to_simulation_mode()
        else:
            self.switch_to_real_mode()

    def _inject_implementation(self,
                               implementation: Union[ChannelGatewayServiceSimulation,
                                                     ChannelGatewayServiceReal]
                               ) -> bool:
        """
        Dependency injection of the implementation used.
            Allows to set the class used for simulation/real mode.

        :param implementation: A valid implementation of the QmixIOServicer.
        """

        self.implementation = implementation
        return True

    def switch_to_simulation_mode(self):
        """Method that will automatically be called by the server when the simulation mode is requested."""
        self.simulation_mode = True
        self._inject_implementation(ChannelGatewayServiceSimulation())

    def switch_to_real_mode(self):
        """Method that will automatically be called by the server when the real mode is requested."""
        self.simulation_mode = False
        self._inject_implementation(ChannelGatewayServiceReal(self.channels))

    def get_channel(self, metadata: Tuple[Tuple[str, str]], type: str):
        """
        Get the channel that is identified by the channel name given in `metadata`

        :param metdata: The metadata of the call. It should contain the requested channel name
        :param type: Either "Command" or "Property"
        :return: A valid channel object if the channel can be identified, otherwise a SiLAFrameworkError will be raised
        """
        return self.implementation.get_channel(metadata, type)

    def GetChannelIdentifiers(self, request, context: grpc.ServicerContext) \
            -> ChannelGatewayService_pb2.GetChannelIdentifiers_Responses:
        """
        Executes the unobservable command "Get Channel Identifiers"
            Get all possible channel names (identifiers) that the given Feature can use.

        :param request: gRPC request containing the parameters passed:
            request.FeatureIdentifier (Feature Identifier): A Fully Qualified Feature Identifier.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            ChannelIdentifiers (Channel Identifiers): A list of channel names (identifiers) that the given Feature can use.
        """

        logging.debug(
            "GetChannelIdentifiers called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )

        try:
            return self.implementation.GetChannelIdentifiers(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)



    def Get_FCPAffectedByMetadata_ChannelIdentifier(self, request, context: grpc.ServicerContext) \
            -> ChannelGatewayService_pb2.Get_FCPAffectedByMetadata_ChannelIdentifier_Responses:
        """
        Requests the unobservable property FCPAffectedByMetadata Channel Identifier
            Specifies which Features/Commands/Properties of the SiLA server are affected by the Channel Identifier Metadata.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            AffectedCalls (AffectedCalls): A string containing a list of Fully Qualified Identifiers of Features, Commands and Properties for which the SiLA Client Metadata is expected as part of the respective RPCs.
        """

        logging.debug(
            "Property FCPAffectedByMetadata_ChannelIdentifier requested in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
        try:
            return self.implementation.Get_FCPAffectedByMetadata_ChannelIdentifier(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)
