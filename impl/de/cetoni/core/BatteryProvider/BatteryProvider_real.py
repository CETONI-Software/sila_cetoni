"""
________________________________________________________________________

:PROJECT: sila_cetoni

*Battery Provider*

:details: BatteryProvider:
    Provides information on the battery state

:file:    BatteryProvider_real.py
:authors: Florian Meinicke

:date: (creation)          2021-04-20T06:40:36.588075
:date: (last modification) 2021-07-09T09:28:43.667653

.. note:: Code generated by sila2codegenerator 0.3.6

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.1.0"

# import general packages
import logging
import time         # used for observables
import uuid         # used for observables
import grpc         # used for type hinting only

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2

# import gRPC modules for this feature
from .gRPC import BatteryProvider_pb2 as BatteryProvider_pb2
# from .gRPC import BatteryProvider_pb2_grpc as BatteryProvider_pb2_grpc

# import default arguments
from .BatteryProvider_default_arguments import default_dict

from qmixsdk.qmixanalogio import AnalogInChannel

from application.application import ApplicationSystem

# noinspection PyPep8Naming,PyUnusedLocal
class BatteryProviderReal:
    """
    Implementation of the *Battery Provider* in *Real* mode
        A device that is powered by a battery
    """

    def __init__(self):
        """Class initialiser"""

        self.system = ApplicationSystem()

        logging.debug('Started server in mode: {mode}'.format(mode='Real'))

    def Subscribe_BatteryVoltage(self, request, context: grpc.ServicerContext) \
            -> BatteryProvider_pb2.Subscribe_BatteryVoltage_Responses:
        """
        Requests the observable property Battery Voltage
            The current voltage of the battery

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            BatteryVoltage (Battery Voltage): The current voltage of the battery
        """

        # The only battery powered device we have is our mobile dosage unit (MobDos).
        # This will always only have a single pump where the first analog in channel
        # provides the current voltage of the system (i.e. the voltage of the battery).
        channel: AnalogInChannel = self.system.pumps[0].io_channels[0]
        # The value we get from the analog in channel has been divided by
        # a voltage divider so we have to multiply by this factor to get
        # the actual voltage value.
        VOLTAGE_DIVIDER_FACTOR = 0.00558

        while True:
            yield BatteryProvider_pb2.Subscribe_BatteryVoltage_Responses(
                BatteryVoltage=silaFW_pb2.Real(
                    value=channel.read_input() * VOLTAGE_DIVIDER_FACTOR
                          if self.system.is_operational else 0
                )
            )
            time.sleep(0.5) # give client some time to catch up
