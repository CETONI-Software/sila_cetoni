#!/usr/bin/env python3
"""
________________________________________________________________________

:PROJECT: sila_cetoni

*QmixControl client*

:details: QmixControl:
    The SiLA 2 driver for Qmix Control Devices

:file:    ControlLoopService_client.py
:authors: Florian Meinicke

:date: (creation)          2021-07-09T07:00:08.792974
:date: (last modification) 2021-07-09T07:00:08.792974

.. note:: Code generated by sila2codegenerator 0.3.6

_______________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""
__version__ = "0.1.0"

# import general packages
import logging
import argparse
import grpc
import time
import datetime

# import meta packages
from typing import Union, Optional

# import SiLA2 library modules
from sila2lib.framework import SiLAFramework_pb2 as silaFW_pb2
from sila2lib.sila_client import SiLA2Client
from sila2lib.framework.std_features import SiLAService_pb2 as SiLAService_feature_pb2
from sila2lib.error_handling import client_err
from sila2lib.error_handling.client_err import SiLAClientError
import sila2lib.utils.py2sila_types as p2s
#   Usually not needed, but - feel free to modify
# from sila2lib.framework.std_features import SimulationController_pb2 as SimController_feature_pb2

# import feature gRPC modules
# Import gRPC libraries of features
from .gRPC import ControlLoopService_pb2
from .gRPC import ControlLoopService_pb2_grpc
# import default arguments for this feature
from .ControlLoopService_default_arguments import default_dict as ControlLoopService_default_dict

from impl.common.decorators import channel_index_serializer

from . import METADATA_CHANNEL_INDEX

# noinspection PyPep8Naming, PyUnusedLocal
class ControlLoopServiceClient:
    """
        The SiLA 2 driver for Qmix Control Devices

    .. note:: For an example on how to construct the parameter or read the response(s) for command calls and properties,
              compare the default dictionary that is stored in the directory of the corresponding feature.
    """
    # The following variables will be filled when run() is executed
    #: Storage for the connected servers version
    server_version: str = ''
    #: Storage for the display name of the connected server
    server_display_name: str = ''
    #: Storage for the description of the connected server
    server_description: str = ''

    def __init__(self,
                 channel = None):
        """Class initialiser"""

        # Create stub objects used to communicate with the server
        self.ControlLoopService_stub = \
            ControlLoopService_pb2_grpc.ControlLoopServiceStub(channel)


        # initialise class variables for server information storage
        self.server_version = ''
        self.server_display_name = ''
        self.server_description = ''

    def WriteSetPoint(self, channel_id: int, SetPointValue: float = 1.0): # -> (ControlLoopService):
        """
        Wrapper to call the unobservable command WriteSetPoint on the server.

        :param channel_id: The index of the controller channel to use (this value is 0-indexed)
                           Will be sent along as metadata of the call
        :param SetPointValue: The Set Point value to write.

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call


        logging.debug(f"Calling WriteSetPoint for channel {channel_id}:")
        try:
            parameter = ControlLoopService_pb2.WriteSetPoint_Parameters(
                SetPointValue=silaFW_pb2.Real(value=SetPointValue)
            )
            metadata = ((METADATA_CHANNEL_INDEX, self._serialize_channel_id(channel_id)),)

            response = self.ControlLoopService_stub.WriteSetPoint(parameter, metadata)
            logging.debug(f"WriteSetPoint response: {response}")

        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return


    def RunControlLoop(self, channel_id: int) \
            -> silaFW_pb2.CommandConfirmation:
        """
        Wrapper to call the observable command RunControlLoop on the server.

        :param channel_id: The index of the controller channel to use (this value is 0-indexed)
                           Will be sent along as metadata of the call
        :returns: A command confirmation object with the following information:
            commandExecutionUUID: A command id with which this observable command can be referenced in future calls
            lifetimeOfExecution (optional): The (maximum) lifetime of this command call.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug(f"Calling RunControlLoop for channel {channel_id}:")
        try:
            metadata = ((METADATA_CHANNEL_INDEX, self._serialize_channel_id(channel_id)),)
            response = self.ControlLoopService_stub.RunControlLoop(
                ControlLoopService_pb2.RunControlLoop_Parameters(),
                metadata
            )

            logging.debug('RunControlLoop response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def RunControlLoop_Info(self, channel_id: int,
                            uuid: Union[str, silaFW_pb2.CommandExecutionUUID]) \
            -> silaFW_pb2.ExecutionInfo:
        """
        Wrapper to get an intermediate response for the observable command RunControlLoop on the server.

        :param channel_id: The index of the controller channel to use (this value is 0-indexed)
                           Will be sent along as metadata of the call
        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.

        :returns: A gRPC object with the status information that has been defined for this command. The following fields
                  are defined:
                    * *commandStatus*: Status of the command (enumeration)
                    * *progressInfo*: Information on the progress of the command (0 to 1)
                    * *estimatedRemainingTime*: Estimate of the remaining time required to run the command
                    * *updatedLifetimeOfExecution*: An update on the execution lifetime
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        if type(uuid) is str:
            uuid = silaFW_pb2.CommandExecutionUUID(value=uuid)

        logging.debug(
            "Requesting status information for command RunControlLoop for channel {channel_id} (UUID={uuid}):".format(
                uuid=uuid.value
            )
        )
        try:
            metadata = ((METADATA_CHANNEL_INDEX, self._serialize_channel_id(channel_id)),)
            response = self.ControlLoopService_stub.RunControlLoop_Info(uuid, metadata)
            logging.debug('RunControlLoop status information: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def RunControlLoop_Result(self, channel_id: int,
                              uuid: Union[str, silaFW_pb2.CommandExecutionUUID]) \
            -> ControlLoopService_pb2.RunControlLoop_Responses:
        """
        Wrapper to get an intermediate response for the observable command RunControlLoop on the server.

        :param channel_id: The index of the controller channel to use (this value is 0-indexed)
                           Will be sent along as metadata of the call
        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.

        :returns: A gRPC object with the result response that has been defined for this command.

        .. note:: Whether the result is available or not can and should be evaluated by calling the
                  :meth:`RunControlLoop_Info` method of this call.
        """
        if type(uuid) is str:
            uuid = silaFW_pb2.CommandExecutionUUID(value=uuid)

        logging.debug(
            "Requesting final result for command RunControlLoop for channel {channel_id} (UUID={uuid}):".format(
                channel_id=channel_id,
                uuid=uuid.value
            )
        )

        try:
            metadata = ((METADATA_CHANNEL_INDEX, self._serialize_channel_id(channel_id)),)
            response = self.ControlLoopService_stub.RunControlLoop_Result(uuid, metadata)
            logging.debug('RunControlLoop result response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def StopControlLoop(self, channel_id: int): # -> (ControlLoopService):
        """
        Wrapper to call the unobservable command StopControlLoop on the server.

        :param channel_id: The index of the controller channel to use (this value is 0-indexed)
                           Will be sent along as metadata of the call
        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug(f"Calling StopControlLoop for channel {channel_id}:")
        try:
            metadata = ((METADATA_CHANNEL_INDEX, self._serialize_channel_id(channel_id)),)

            response = self.ControlLoopService_stub.StopControlLoop(
                ControlLoopService_pb2.StopControlLoop_Parameters(),
                metadata
            )
            logging.debug(f"StopControlLoop response: {response}")

        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return



    def Get_NumberOfChannels(self) \
            -> ControlLoopService_pb2.Get_NumberOfChannels_Responses:
        """Wrapper to get property NumberOfChannels from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading unobservable property NumberOfChannels:")
        try:
            response = self.ControlLoopService_stub.Get_NumberOfChannels(
                ControlLoopService_pb2.Get_NumberOfChannels_Parameters()
            )
            logging.debug(
                'Get_NumberOfChannels response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response.NumberOfChannels

    def Subscribe_ControllerValue(self, channel_id: int) \
            -> ControlLoopService_pb2.Subscribe_ControllerValue_Responses:
        """
        Wrapper to get property ControllerValue from the server.

        :param channel_id: The index of the controller channel to use (this value is 0-indexed)
                           Will be sent along as metadata of the call
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug(f"Reading observable property ControllerValue for channel {channel_id}:")
        try:
            metadata = ((METADATA_CHANNEL_INDEX, self._serialize_channel_id(channel_id)),)
            response = self.ControlLoopService_stub.Subscribe_ControllerValue(
                ControlLoopService_pb2.Subscribe_ControllerValue_Parameters(),
                metadata
            )
            logging.debug(
                'Subscribe_ControllerValue response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response
    def Subscribe_SetPointValue(self, channel_id: int) \
            -> ControlLoopService_pb2.Subscribe_SetPointValue_Responses:
        """
        Wrapper to get property SetPointValue from the server.

        :param channel_id: The index of the controller channel to use (this value is 0-indexed)
                           Will be sent along as metadata of the call
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug(f"Reading observable property SetPointValue for channel {channel_id}:")
        try:
            metadata = ((METADATA_CHANNEL_INDEX, self._serialize_channel_id(channel_id)),)
            response = self.ControlLoopService_stub.Subscribe_SetPointValue(
                ControlLoopService_pb2.Subscribe_SetPointValue_Parameters(),
                metadata
            )
            logging.debug(
                'Subscribe_SetPointValue response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response


    def Get_FCPAffectedByMetadata_ChannelIndex(self) \
            -> ControlLoopService_pb2.Get_FCPAffectedByMetadata_ChannelIndex_Responses:
        """Wrapper to get property FCPAffectedByMetadata_ChannelIndex from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading unobservable property FCPAffectedByMetadata_ChannelIndex:")
        try:
            response = self.ControlLoopService_stub.Get_FCPAffectedByMetadata_ChannelIndex(
                ControlLoopService_pb2.Get_FCPAffectedByMetadata_ChannelIndex_Parameters()
            )
            logging.debug(
                'Get_FCPAffectedByMetadata_ChannelIndex response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response.AffectedCalls



    @staticmethod
    def grpc_error_handling(error_object: grpc.Call) -> None:
        """Handles exceptions of type grpc.RpcError"""
        # pass to the default error handling
        grpc_error =  client_err.grpc_error_handling(error_object=error_object)

        logging.error(grpc_error.error_type)
        if hasattr(grpc_error.message, "parameter"):
            logging.error(grpc_error.message.parameter)
        logging.error(grpc_error.message.message)
        if grpc_error.error_type == client_err.SiLAError.DEFINED_EXECUTION_ERROR:
          if grpc_error.message.errorIdentifier == 'InvalidChannelIndex' :
            raise InvalidChannelIndexError(grpc_error.message.message)


class InvalidChannelIndexError(SiLAClientError):
    """Invalid Channel Index
    """
    pass


