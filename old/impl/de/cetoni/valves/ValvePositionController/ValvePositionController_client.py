#!/usr/bin/env python3
"""
________________________________________________________________________

:PROJECT: sila_cetoni

*Valve client*

:details: Valve:
    Allows to control valve devices

:file:    ValvePositionController_client.py
:authors: Florian Meinicke

:date: (creation)          2021-07-10T09:27:04.761905
:date: (last modification) 2021-07-10T09:27:04.761905

.. note:: Code generated by sila2codegenerator 0.3.6

_______________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""
__version__ = "0.1.0"

# import general packages
import logging
import argparse
import grpc
import time
import datetime

# import meta packages
from typing import Union, Optional

# import SiLA2 library modules
from sila2lib.framework import SiLAFramework_pb2 as silaFW_pb2
from sila2lib.sila_client import SiLA2Client
from sila2lib.framework.std_features import SiLAService_pb2 as SiLAService_feature_pb2
from sila2lib.error_handling import client_err
from sila2lib.error_handling.client_err import SiLAClientError
import sila2lib.utils.py2sila_types as p2s
#   Usually not needed, but - feel free to modify
# from sila2lib.framework.std_features import SimulationController_pb2 as SimController_feature_pb2

# import feature gRPC modules
# Import gRPC libraries of features
from .gRPC import ValvePositionController_pb2
from .gRPC import ValvePositionController_pb2_grpc
# import default arguments for this feature
from .ValvePositionController_default_arguments import default_dict as ValvePositionController_default_dict

from ..ValveGatewayService.gRPC import ValveGatewayService_pb2
from ..ValveGatewayService import METADATA_VALVE_INDEX


# noinspection PyPep8Naming, PyUnusedLocal
class ValvePositionControllerClient:
    """
        Allows to control valve devices

    .. note:: For an example on how to construct the parameter or read the response(s) for command calls and properties,
              compare the default dictionary that is stored in the directory of the corresponding feature.
    """
    # The following variables will be filled when run() is executed
    #: Storage for the connected servers version
    server_version: str = ''
    #: Storage for the display name of the connected server
    server_display_name: str = ''
    #: Storage for the description of the connected server
    server_description: str = ''

    def __init__(self,
                 channel = None):
        """Class initialiser"""

        # Create stub objects used to communicate with the server
        self.ValvePositionController_stub = \
            ValvePositionController_pb2_grpc.ValvePositionControllerStub(channel)


        # initialise class variables for server information storage
        self.server_version = ''
        self.server_display_name = ''
        self.server_description = ''

    def _serialize_valve_id(self, valve_id: int) -> bytes:
        """
        Converts the given Valve Index from its integer representation into
        a serialized protobuf message
        """
        return ValveGatewayService_pb2.Metadata_ValveIndex(
            ValveIndex=silaFW_pb2.Integer(value=valve_id)).SerializeToString()


    def SwitchToPosition(self, valve_id: int, Position: int = 1): # -> (ValvePositionController):
        """
        Wrapper to call the unobservable command SwitchToPosition on the server.

        :param valve_id: The index of the valve to use. Will be sent along as metadata
                        of the call
        :param Position: The target position that the valve should be switched to.

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug(f"Calling SwitchToPosition for valve {valve_id}:")
        try:
            parameter = ValvePositionController_pb2.SwitchToPosition_Parameters(
                Position=silaFW_pb2.Integer(value=Position)
            )
            metadata = ((METADATA_VALVE_INDEX, self._serialize_valve_id(valve_id)),)

            response = self.ValvePositionController_stub.SwitchToPosition(parameter, metadata=metadata)
            logging.debug(f"SwitchToPosition response: {response}")

        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return


    def TogglePosition(self, valve_id: int): # -> (ValvePositionController):
        """
        Wrapper to call the unobservable command TogglePosition on the server.

        :param valve_id: The index of the valve to use. Will be sent along as metadata
                        of the call

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug(f"Calling TogglePosition for valve {valve_id}:")
        try:
            metadata = ((METADATA_VALVE_INDEX, self._serialize_valve_id(valve_id)),)

            response = self.ValvePositionController_stub.TogglePosition(
                ValvePositionController_pb2.TogglePosition_Parameters(),
                metadata
            )
            logging.debug(f"TogglePosition response: {response}")

        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return



    def Get_NumberOfPositions(self, valve_id: int) \
            -> ValvePositionController_pb2.Get_NumberOfPositions_Responses:
        """
        Wrapper to get property NumberOfPositions from the server.

        :param valve_id: The index of the valve to use. Will be sent along as metadata
                        of the call
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug(f"Reading unobservable property NumberOfPositions for valve {valve_id}:")
        try:
            metadata = ((METADATA_VALVE_INDEX, self._serialize_valve_id(valve_id)),)
            response = self.ValvePositionController_stub.Get_NumberOfPositions(
                ValvePositionController_pb2.Get_NumberOfPositions_Parameters(),
                metadata
            )
            logging.debug(
                'Get_NumberOfPositions response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response.NumberOfPositions

    def Subscribe_Position(self, valve_id: int) \
            -> ValvePositionController_pb2.Subscribe_Position_Responses:
        """
        Wrapper to get property Position from the server.

        :param valve_id: The index of the valve to use. Will be sent along as metadata
                        of the call
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug(f"Reading observable property Position for valve {valve_id}:")
        try:
            metadata = ((METADATA_VALVE_INDEX, self._serialize_valve_id(valve_id)),)
            response = self.ValvePositionController_stub.Subscribe_Position(
                ValvePositionController_pb2.Subscribe_Position_Parameters(),
                metadata
            )
            logging.debug(
                'Subscribe_Position response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response


    #   No metadata defined

    @staticmethod
    def grpc_error_handling(error_object: grpc.Call) -> None:
        """Handles exceptions of type grpc.RpcError"""
        # pass to the default error handling
        grpc_error =  client_err.grpc_error_handling(error_object=error_object)

        logging.error(grpc_error.error_type)
        if hasattr(grpc_error.message, "parameter"):
            logging.error(grpc_error.message.parameter)
        logging.error(grpc_error.message.message)
        if grpc_error.error_type == client_err.SiLAError.DEFINED_EXECUTION_ERROR:
          if grpc_error.message.errorIdentifier == 'ValveNotToggleable' :
            raise ValveNotToggleableError(grpc_error.message.message)
        if grpc_error.error_type == client_err.SiLAError.DEFINED_EXECUTION_ERROR:
          if grpc_error.message.errorIdentifier == 'ValvePositionNotAvailable' :
            raise ValvePositionNotAvailableError(grpc_error.message.message)


class ValveNotToggleableError(SiLAClientError):
    """Valve Not Toggleable
    """
    pass


class ValvePositionNotAvailableError(SiLAClientError):
    """Valve Position Not Available
    """
    pass


