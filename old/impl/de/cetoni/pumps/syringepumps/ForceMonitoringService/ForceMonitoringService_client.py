#!/usr/bin/env python3
"""
________________________________________________________________________

:PROJECT: SiLA2_python

*neMESYS client*

:details: neMESYS:
    This is a sample service for controlling neMESYS syringe pumps via SiLA2

:file:    ForceMonitoringService_client.py
:authors: Florian Meinicke

:date: (creation)          2021-11-30T07:38:43.950967
:date: (last modification) 2021-11-30T07:38:43.950967

.. note:: Code generated by sila2codegenerator 0.3.7

_______________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""
__version__ = "0.1.0"

# import general packages
import logging
import argparse
import grpc
import time
import datetime

# import meta packages
from typing import Union, Optional

# import SiLA2 library modules
from sila2lib.framework import SiLAFramework_pb2 as silaFW_pb2
from sila2lib.sila_client import SiLA2Client
from sila2lib.framework.std_features import SiLAService_pb2 as SiLAService_feature_pb2
from sila2lib.error_handling import client_err
from sila2lib.error_handling.client_err import SiLAClientError
import sila2lib.utils.py2sila_types as p2s
#   Usually not needed, but - feel free to modify
# from sila2lib.framework.std_features import SimulationController_pb2 as SimController_feature_pb2

# import feature gRPC modules
# Import gRPC libraries of features
from impl.de.cetoni.pumps.syringepumps.ForceMonitoringService.gRPC import ForceMonitoringService_pb2
from impl.de.cetoni.pumps.syringepumps.ForceMonitoringService.gRPC import ForceMonitoringService_pb2_grpc
# import default arguments for this feature
from impl.de.cetoni.pumps.syringepumps.ForceMonitoringService.ForceMonitoringService_default_arguments import default_dict as ForceMonitoringService_default_dict


# noinspection PyPep8Naming, PyUnusedLocal
class ForceMonitoringServiceClient:
    """
        This is a sample service for controlling neMESYS syringe pumps via SiLA2

    .. note:: For an example on how to construct the parameter or read the response(s) for command calls and properties,
              compare the default dictionary that is stored in the directory of the corresponding feature.
    """
    # The following variables will be filled when run() is executed
    #: Storage for the connected servers version
    server_version: str = ''
    #: Storage for the display name of the connected server
    server_display_name: str = ''
    #: Storage for the description of the connected server
    server_description: str = ''

    def __init__(self,
                 channel = None):
        """Class initialiser"""

        # Create stub objects used to communicate with the server
        self.ForceMonitoringService_stub = \
            ForceMonitoringService_pb2_grpc.ForceMonitoringServiceStub(channel)


        # initialise class variables for server information storage
        self.server_version = ''
        self.server_display_name = ''
        self.server_description = ''

    def ClearForceSafetyStop(self,
                EmptyParameter: bytes = b''
                     ): # -> (ForceMonitoringService):
        """
        Wrapper to call the unobservable command ClearForceSafetyStop on the server.

        :param parameter: The parameter gRPC construct required for this command.

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        parameter = None
        metadata = None  # add metadata generator here

        logging.debug("Calling ClearForceSafetyStop:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = ForceMonitoringService_pb2.ClearForceSafetyStop_Parameters(

                )

            response = self.ForceMonitoringService_stub.ClearForceSafetyStop(parameter, metadata)
            logging.debug(f"ClearForceSafetyStop response: {response}")

        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return


    def EnableForceMonitoring(self,
                EmptyParameter: bytes = b''
                     ): # -> (ForceMonitoringService):
        """
        Wrapper to call the unobservable command EnableForceMonitoring on the server.

        :param parameter: The parameter gRPC construct required for this command.

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        parameter = None
        metadata = None  # add metadata generator here

        logging.debug("Calling EnableForceMonitoring:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = ForceMonitoringService_pb2.EnableForceMonitoring_Parameters(

                )

            response = self.ForceMonitoringService_stub.EnableForceMonitoring(parameter, metadata)
            logging.debug(f"EnableForceMonitoring response: {response}")

        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return


    def DisableForceMonitoring(self,
                EmptyParameter: bytes = b''
                     ): # -> (ForceMonitoringService):
        """
        Wrapper to call the unobservable command DisableForceMonitoring on the server.

        :param parameter: The parameter gRPC construct required for this command.

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        parameter = None
        metadata = None  # add metadata generator here

        logging.debug("Calling DisableForceMonitoring:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = ForceMonitoringService_pb2.DisableForceMonitoring_Parameters(

                )

            response = self.ForceMonitoringService_stub.DisableForceMonitoring(parameter, metadata)
            logging.debug(f"DisableForceMonitoring response: {response}")

        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return


    def SetForceLimit(self,
                ForceLimit: float = 1.0
                     ): # -> (ForceMonitoringService):
        """
        Wrapper to call the unobservable command SetForceLimit on the server.

        :param parameter: The parameter gRPC construct required for this command.

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        parameter = None
        metadata = None  # add metadata generator here

        logging.debug("Calling SetForceLimit:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = ForceMonitoringService_pb2.SetForceLimit_Parameters(
                                    ForceLimit=pb2.DataType_Force(**default_dict['DataType_Force'])
                )

            response = self.ForceMonitoringService_stub.SetForceLimit(parameter, metadata)
            logging.debug(f"SetForceLimit response: {response}")

        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return



    def Subscribe_ForceSensorValue(self) \
            -> ForceMonitoringService_pb2.Subscribe_ForceSensorValue_Responses:
        """Wrapper to get property ForceSensorValue from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading observable property ForceSensorValue:")
        try:
            response = self.ForceMonitoringService_stub.Subscribe_ForceSensorValue(
                ForceMonitoringService_pb2.Subscribe_ForceSensorValue_Parameters()
            )
            logging.debug(
                'Subscribe_ForceSensorValue response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response
    def Subscribe_ForceLimit(self) \
            -> ForceMonitoringService_pb2.Subscribe_ForceLimit_Responses:
        """Wrapper to get property ForceLimit from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading observable property ForceLimit:")
        try:
            response = self.ForceMonitoringService_stub.Subscribe_ForceLimit(
                ForceMonitoringService_pb2.Subscribe_ForceLimit_Parameters()
            )
            logging.debug(
                'Subscribe_ForceLimit response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response
    def Subscribe_MaxDeviceForce(self) \
            -> ForceMonitoringService_pb2.Subscribe_MaxDeviceForce_Responses:
        """Wrapper to get property MaxDeviceForce from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading observable property MaxDeviceForce:")
        try:
            response = self.ForceMonitoringService_stub.Subscribe_MaxDeviceForce(
                ForceMonitoringService_pb2.Subscribe_MaxDeviceForce_Parameters()
            )
            logging.debug(
                'Subscribe_MaxDeviceForce response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response
    def Subscribe_ForceMonitoringEnabled(self) \
            -> ForceMonitoringService_pb2.Subscribe_ForceMonitoringEnabled_Responses:
        """Wrapper to get property ForceMonitoringEnabled from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading observable property ForceMonitoringEnabled:")
        try:
            response = self.ForceMonitoringService_stub.Subscribe_ForceMonitoringEnabled(
                ForceMonitoringService_pb2.Subscribe_ForceMonitoringEnabled_Parameters()
            )
            logging.debug(
                'Subscribe_ForceMonitoringEnabled response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response
    def Subscribe_ForceSafetyStopActive(self) \
            -> ForceMonitoringService_pb2.Subscribe_ForceSafetyStopActive_Responses:
        """Wrapper to get property ForceSafetyStopActive from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading observable property ForceSafetyStopActive:")
        try:
            response = self.ForceMonitoringService_stub.Subscribe_ForceSafetyStopActive(
                ForceMonitoringService_pb2.Subscribe_ForceSafetyStopActive_Parameters()
            )
            logging.debug(
                'Subscribe_ForceSafetyStopActive response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response


    @staticmethod
    def grpc_error_handling(error_object: grpc.Call) -> None:
        """Handles exceptions of type grpc.RpcError"""
        # pass to the default error handling
        grpc_error =  client_err.grpc_error_handling(error_object=error_object)

        logging.error(grpc_error.error_type)
        if hasattr(grpc_error.message, "parameter"):
            logging.error(grpc_error.message.parameter)
        logging.error(grpc_error.message.message)


