"""
________________________________________________________________________

:PROJECT: SiLA2_python

*Force Monitoring Service*

:details: ForceMonitoringService:
    Functionality to control the force monitoring, read the force sensor and set a custom force limit for pump devices
    that support this functionality such as Nemesys S and Nemesys M.

:file:    ForceMonitoringService_simulation.py
:authors: Florian Meinicke

:date: (creation)          2021-11-30T07:38:43.933968
:date: (last modification) 2021-11-30T07:38:43.933968

.. note:: Code generated by sila2codegenerator 0.3.7

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.1.0"

# import general packages
import logging
import time         # used for observables
import uuid         # used for observables
import grpc         # used for type hinting only

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2

# import gRPC modules for this feature
from .gRPC import ForceMonitoringService_pb2 as ForceMonitoringService_pb2
# from .gRPC import ForceMonitoringService_pb2_grpc as ForceMonitoringService_pb2_grpc

# import default arguments
from .ForceMonitoringService_default_arguments import default_dict



# noinspection PyPep8Naming,PyUnusedLocal
class ForceMonitoringServiceSimulation:
    """
    Implementation of the *Force Monitoring Service* in *Simulation* mode
        This is a sample service for controlling neMESYS syringe pumps via SiLA2
    """

    def __init__(self, hardware_interface=None):
        """Class initialiser"""

        self.hardware_interface = hardware_interface

        logging.debug('Started server in mode: {mode}'.format(mode='Simulation'))

    def _get_command_state(self, command_uuid: str) -> silaFW_pb2.ExecutionInfo:
        """
        Method to fill an ExecutionInfo message from the SiLA server for observable commands

        :param command_uuid: The uuid of the command for which to return the current state

        :return: An execution info object with the current command state
        """

        #: Enumeration of silaFW_pb2.ExecutionInfo.CommandStatus
        command_status = silaFW_pb2.ExecutionInfo.CommandStatus.waiting
        #: Real silaFW_pb2.Real(0...1)
        command_progress = None
        #: Duration silaFW_pb2.Duration(seconds=<seconds>, nanos=<nanos>)
        command_estimated_remaining = None
        #: Duration silaFW_pb2.Duration(seconds=<seconds>, nanos=<nanos>)
        command_lifetime_of_execution = None

        # TODO: check the state of the command with the given uuid and return the correct information

        # just return a default in this example
        return silaFW_pb2.ExecutionInfo(
            commandStatus=command_status,
            progressInfo=(
                command_progress if command_progress is not None else None
            ),
            estimatedRemainingTime=(
                command_estimated_remaining if command_estimated_remaining is not None else None
            ),
            updatedLifetimeOfExecution=(
                command_lifetime_of_execution if command_lifetime_of_execution is not None else None
            )
        )

    def ClearForceSafetyStop(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.ClearForceSafetyStop_Responses:
        """
        Executes the unobservable command "Clear Force Safety Stop"
            Clear/acknowledge a force safety stop.
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
        # return_value = GreetingProvider_pb2.SayHello_Responses(Greeting=silaFW_pb2.String(value=f'"hi : {request.Name.value}"'))
        
    
        # TODO:
        #   Add implementation of Simulation for command ClearForceSafetyStop here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = ForceMonitoringService_pb2.ClearForceSafetyStop_Responses(
                #**default_dict['ClearForceSafetyStop_Responses']
                EmptyResponse=silaFW_pb2.Void(value=b'')
            )
    
        return return_value
    
    
    def EnableForceMonitoring(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.EnableForceMonitoring_Responses:
        """
        Executes the unobservable command "Enable Force Monitoring"
            Enable the force monitoring.
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
        # return_value = GreetingProvider_pb2.SayHello_Responses(Greeting=silaFW_pb2.String(value=f'"hi : {request.Name.value}"'))
        
    
        # TODO:
        #   Add implementation of Simulation for command EnableForceMonitoring here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = ForceMonitoringService_pb2.EnableForceMonitoring_Responses(
                #**default_dict['EnableForceMonitoring_Responses']
                EmptyResponse=silaFW_pb2.Void(value=b'')
            )
    
        return return_value
    
    
    def DisableForceMonitoring(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.DisableForceMonitoring_Responses:
        """
        Executes the unobservable command "Disable Force Monitoring"
            Disable the force monitoring.
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
        # return_value = GreetingProvider_pb2.SayHello_Responses(Greeting=silaFW_pb2.String(value=f'"hi : {request.Name.value}"'))
        
    
        # TODO:
        #   Add implementation of Simulation for command DisableForceMonitoring here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = ForceMonitoringService_pb2.DisableForceMonitoring_Responses(
                #**default_dict['DisableForceMonitoring_Responses']
                EmptyResponse=silaFW_pb2.Void(value=b'')
            )
    
        return return_value
    
    
    def SetForceLimit(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.SetForceLimit_Responses:
        """
        Executes the unobservable command "Set Force Limit"
            Set a custom limit.
    
        :param request: gRPC request containing the parameters passed:
            request.ForceLimit (Force Limit): The force limit to set. If higher than MaxDeviceForce, MaxDeviceForce will be used instead.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
        # return_value = GreetingProvider_pb2.SayHello_Responses(Greeting=silaFW_pb2.String(value=f'"hi : {request.Name.value}"'))
        
    
        # TODO:
        #   Add implementation of Simulation for command SetForceLimit here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = ForceMonitoringService_pb2.SetForceLimit_Responses(
                #**default_dict['SetForceLimit_Responses']
                EmptyResponse=silaFW_pb2.Void(value=b'')
            )
    
        return return_value
    

    def Subscribe_ForceSensorValue(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.Subscribe_ForceSensorValue_Responses:
        """
        Requests the observable property Force Sensor Value
            The currently measured force as read by the force sensor.
    
        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: A response object with the following fields:
            request.ForceSensorValue (Force Sensor Value): The currently measured force as read by the force sensor.
        """
    
        # initialise the return value
        return_value: ForceMonitoringService_pb2.Subscribe_ForceSensorValue_Responses = None
    
        # we could use a timeout here if we wanted
        while True:
            # TODO:
            #   Add implementation of Simulation for property ForceSensorValue here and write the resulting
            #   response in return_value
    
            # create the default value
            if return_value is None:
                return_value = ForceMonitoringService_pb2.Subscribe_ForceSensorValue_Responses(
                    #**default_dict['Subscribe_ForceSensorValue_Responses']
                    ForceSensorValue=ForceMonitoringService_pb2.DataType_ForceUnit(silaFW_pb2.Real(value=1.0))
                )
    
    
            yield return_value
    
    
    def Subscribe_ForceLimit(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.Subscribe_ForceLimit_Responses:
        """
        Requests the observable property Force Limit
            The current force limit.
    
        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: A response object with the following fields:
            request.ForceLimit (Force Limit): The current force limit.
        """
    
        # initialise the return value
        return_value: ForceMonitoringService_pb2.Subscribe_ForceLimit_Responses = None
    
        # we could use a timeout here if we wanted
        while True:
            # TODO:
            #   Add implementation of Simulation for property ForceLimit here and write the resulting
            #   response in return_value
    
            # create the default value
            if return_value is None:
                return_value = ForceMonitoringService_pb2.Subscribe_ForceLimit_Responses(
                    #**default_dict['Subscribe_ForceLimit_Responses']
                    ForceLimit=ForceMonitoringService_pb2.DataType_ForceUnit(silaFW_pb2.Real(value=1.0))
                )
    
    
            yield return_value
    
    
    def Subscribe_MaxDeviceForce(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.Subscribe_MaxDeviceForce_Responses:
        """
        Requests the observable property Maximum Device Force
            The maximum device force (i.e. the maximum force the pump hardware can take in continuous operation).
    
        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: A response object with the following fields:
            request.MaxDeviceForce (Maximum Device Force): The maximum device force (i.e. the maximum force the pump hardware can take in continuous operation).
        """
    
        # initialise the return value
        return_value: ForceMonitoringService_pb2.Subscribe_MaxDeviceForce_Responses = None
    
        # we could use a timeout here if we wanted
        while True:
            # TODO:
            #   Add implementation of Simulation for property MaxDeviceForce here and write the resulting
            #   response in return_value
    
            # create the default value
            if return_value is None:
                return_value = ForceMonitoringService_pb2.Subscribe_MaxDeviceForce_Responses(
                    #**default_dict['Subscribe_MaxDeviceForce_Responses']
                    MaxDeviceForce=ForceMonitoringService_pb2.DataType_ForceUnit(silaFW_pb2.Real(value=1.0))
                )
    
    
            yield return_value
    
    
    def Subscribe_ForceMonitoringEnabled(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.Subscribe_ForceMonitoringEnabled_Responses:
        """
        Requests the observable property Force Monitoring Enabled
            Whether force monitoring is enabled.
    
        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: A response object with the following fields:
            request.ForceMonitoringEnabled (Force Monitoring Enabled): Whether force monitoring is enabled.
        """
    
        # initialise the return value
        return_value: ForceMonitoringService_pb2.Subscribe_ForceMonitoringEnabled_Responses = None
    
        # we could use a timeout here if we wanted
        while True:
            # TODO:
            #   Add implementation of Simulation for property ForceMonitoringEnabled here and write the resulting
            #   response in return_value
    
            # create the default value
            if return_value is None:
                return_value = ForceMonitoringService_pb2.Subscribe_ForceMonitoringEnabled_Responses(
                    #**default_dict['Subscribe_ForceMonitoringEnabled_Responses']
                    ForceMonitoringEnabled=silaFW_pb2.Boolean(value=False)
                )
    
    
            yield return_value
    
    
    def Subscribe_ForceSafetyStopActive(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.Subscribe_ForceSafetyStopActive_Responses:
        """
        Requests the observable property Force Safety Stop Active
            Whether force safety stop is active.
    
        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: A response object with the following fields:
            request.ForceSafetyStopActive (Force Safety Stop Active): Whether force safety stop is active.
        """
    
        # initialise the return value
        return_value: ForceMonitoringService_pb2.Subscribe_ForceSafetyStopActive_Responses = None
    
        # we could use a timeout here if we wanted
        while True:
            # TODO:
            #   Add implementation of Simulation for property ForceSafetyStopActive here and write the resulting
            #   response in return_value
    
            # create the default value
            if return_value is None:
                return_value = ForceMonitoringService_pb2.Subscribe_ForceSafetyStopActive_Responses(
                    #**default_dict['Subscribe_ForceSafetyStopActive_Responses']
                    ForceSafetyStopActive=silaFW_pb2.Boolean(value=False)
                )
    
    
            yield return_value
    
