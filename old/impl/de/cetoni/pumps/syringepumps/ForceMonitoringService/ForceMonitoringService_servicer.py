"""
________________________________________________________________________

:PROJECT: SiLA2_python

*Force Monitoring Service*

:details: ForceMonitoringService:
    Functionality to control the force monitoring, read the force sensor and set a custom force limit for pump devices
    that support this functionality such as Nemesys S and Nemesys M.

:file:    ForceMonitoringService_servicer.py
:authors: Florian Meinicke

:date: (creation)          2021-11-30T07:38:43.923968
:date: (last modification) 2021-11-30T07:38:43.923968

.. note:: Code generated by sila2codegenerator 0.3.7

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.1.0"

# import general packages
import logging
import grpc

# meta packages
from typing import Union

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2
# import SiLA errors
from impl.common.errors import SiLAError, QmixSDKSiLAError, DeviceError

# import gRPC modules for this feature
from .gRPC import ForceMonitoringService_pb2 as ForceMonitoringService_pb2
from .gRPC import ForceMonitoringService_pb2_grpc as ForceMonitoringService_pb2_grpc

# import simulation and real implementation
from .ForceMonitoringService_simulation import ForceMonitoringServiceSimulation
from .ForceMonitoringService_real import ForceMonitoringServiceReal



class ForceMonitoringService(ForceMonitoringService_pb2_grpc.ForceMonitoringServiceServicer):
    """
    This is a sample service for controlling neMESYS syringe pumps via SiLA2
    """
    implementation: Union[ForceMonitoringServiceSimulation, ForceMonitoringServiceReal]
    simulation_mode: bool

    def __init__(self, pump, simulation_mode: bool = True):
        """
        Class initialiser.

        :param pump: A valid `qxmixpump` for this service to use
        :param simulation_mode: Sets whether at initialisation the simulation mode is active or the real mode.
        """

        self.pump = pump

        self.simulation_mode = simulation_mode
        if simulation_mode:
            self.switch_to_simulation_mode()
        else:
            self.switch_to_real_mode()

    def _inject_implementation(self,
                               implementation: Union[ForceMonitoringServiceSimulation,
                                                     ForceMonitoringServiceReal]
                               ) -> bool:
        """
        Dependency injection of the implementation used.
            Allows to set the class used for simulation/real mode.

        :param implementation: A valid implementation of the neMESYSServicer.
        """

        self.implementation = implementation
        return True

    def switch_to_simulation_mode(self):
        """Method that will automatically be called by the server when the simulation mode is requested."""
        self.simulation_mode = True
        self._inject_implementation(ForceMonitoringServiceSimulation())

    def switch_to_real_mode(self):
        """Method that will automatically be called by the server when the real mode is requested."""
        self.simulation_mode = False
        self._inject_implementation(ForceMonitoringServiceReal(pump=self.pump))

    def ClearForceSafetyStop(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.ClearForceSafetyStop_Responses:
        """
        Executes the unobservable command "Clear Force Safety Stop"
            Clear/acknowledge a force safety stop.

        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        logging.debug(
            "ClearForceSafetyStop called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )

        # parameter validation
        # if request.my_paramameter.value out of scope :
        #        sila_val_err = SiLAValidationError(parameter="myParameter",
        #                                           msg=f"Parameter {request.my_parameter.value} out of scope!")
        #        sila_val_err.raise_rpc_error(context)

        try:
            return self.implementation.ClearForceSafetyStop(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)

    def EnableForceMonitoring(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.EnableForceMonitoring_Responses:
        """
        Executes the unobservable command "Enable Force Monitoring"
            Enable the force monitoring.

        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        logging.debug(
            "EnableForceMonitoring called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )

        # parameter validation
        # if request.my_paramameter.value out of scope :
        #        sila_val_err = SiLAValidationError(parameter="myParameter",
        #                                           msg=f"Parameter {request.my_parameter.value} out of scope!")
        #        sila_val_err.raise_rpc_error(context)

        try:
            return self.implementation.EnableForceMonitoring(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)

    def DisableForceMonitoring(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.DisableForceMonitoring_Responses:
        """
        Executes the unobservable command "Disable Force Monitoring"
            Disable the force monitoring.

        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        logging.debug(
            "DisableForceMonitoring called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )

        # parameter validation
        # if request.my_paramameter.value out of scope :
        #        sila_val_err = SiLAValidationError(parameter="myParameter",
        #                                           msg=f"Parameter {request.my_parameter.value} out of scope!")
        #        sila_val_err.raise_rpc_error(context)

        try:
            return self.implementation.DisableForceMonitoring(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)

    def SetForceLimit(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.SetForceLimit_Responses:
        """
        Executes the unobservable command "Set Force Limit"
            Set a custom limit.

        :param request: gRPC request containing the parameters passed:
            request.ForceLimit (Force Limit): The force limit to set. If higher than MaxDeviceForce, MaxDeviceForce will be used instead.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        logging.debug(
            "SetForceLimit called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )

        # parameter validation
        # if request.my_paramameter.value out of scope :
        #        sila_val_err = SiLAValidationError(parameter="myParameter",
        #                                           msg=f"Parameter {request.my_parameter.value} out of scope!")
        #        sila_val_err.raise_rpc_error(context)

        try:
            return self.implementation.SetForceLimit(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)

    def Subscribe_ForceSensorValue(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.Subscribe_ForceSensorValue_Responses:
        """
        Requests the observable property Force Sensor Value
            The currently measured force as read by the force sensor.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response stream with the following fields:
            request.ForceSensorValue (Force Sensor Value): The currently measured force as read by the force sensor.
        """

        logging.debug(
            "Property ForceSensorValue requested in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
        try:
            for value in self.implementation.Subscribe_ForceSensorValue(request, context):
                yield value
        except (SiLAError, DeviceError) as err:
            if isinstance(err, DeviceError):
                err = QmixSDKSiLAError(err)
            err.raise_rpc_error(context=context)


    def Subscribe_ForceLimit(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.Subscribe_ForceLimit_Responses:
        """
        Requests the observable property Force Limit
            The current force limit.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response stream with the following fields:
            request.ForceLimit (Force Limit): The current force limit.
        """

        logging.debug(
            "Property ForceLimit requested in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
        try:
            for value in self.implementation.Subscribe_ForceLimit(request, context):
                yield value
        except (SiLAError, DeviceError) as err:
            if isinstance(err, DeviceError):
                err = QmixSDKSiLAError(err)
            err.raise_rpc_error(context=context)


    def Subscribe_MaxDeviceForce(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.Subscribe_MaxDeviceForce_Responses:
        """
        Requests the observable property Maximum Device Force
            The maximum device force (i.e. the maximum force the pump hardware can take in continuous operation).

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response stream with the following fields:
            request.MaxDeviceForce (Maximum Device Force): The maximum device force (i.e. the maximum force the pump hardware can take in continuous operation).
        """

        logging.debug(
            "Property MaxDeviceForce requested in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
        try:
            for value in self.implementation.Subscribe_MaxDeviceForce(request, context):
                yield value
        except (SiLAError, DeviceError) as err:
            if isinstance(err, DeviceError):
                err = QmixSDKSiLAError(err)
            err.raise_rpc_error(context=context)


    def Subscribe_ForceMonitoringEnabled(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.Subscribe_ForceMonitoringEnabled_Responses:
        """
        Requests the observable property Force Monitoring Enabled
            Whether force monitoring is enabled.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response stream with the following fields:
            request.ForceMonitoringEnabled (Force Monitoring Enabled): Whether force monitoring is enabled.
        """

        logging.debug(
            "Property ForceMonitoringEnabled requested in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
        try:
            for value in self.implementation.Subscribe_ForceMonitoringEnabled(request, context):
                yield value
        except (SiLAError, DeviceError) as err:
            if isinstance(err, DeviceError):
                err = QmixSDKSiLAError(err)
            err.raise_rpc_error(context=context)


    def Subscribe_ForceSafetyStopActive(self, request, context: grpc.ServicerContext) \
            -> ForceMonitoringService_pb2.Subscribe_ForceSafetyStopActive_Responses:
        """
        Requests the observable property Force Safety Stop Active
            Whether force safety stop is active.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response stream with the following fields:
            request.ForceSafetyStopActive (Force Safety Stop Active): Whether force safety stop is active.
        """

        logging.debug(
            "Property ForceSafetyStopActive requested in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
        try:
            for value in self.implementation.Subscribe_ForceSafetyStopActive(request, context):
                yield value
        except (SiLAError, DeviceError) as err:
            if isinstance(err, DeviceError):
                err = QmixSDKSiLAError(err)
            err.raise_rpc_error(context=context)

