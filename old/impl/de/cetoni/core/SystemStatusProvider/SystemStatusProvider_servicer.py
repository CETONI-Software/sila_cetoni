"""
________________________________________________________________________

:PROJECT: SiLA2_python

*System Status Provider*

:details: SystemStatusProvider:
    Provides information about the overall system, e.g. if the system is operational or not

:file:    SystemStatusProvider_servicer.py
:authors: Florian Meinicke

:date: (creation)          2021-07-15T09:24:04.578471
:date: (last modification) 2021-07-15T09:24:04.578471

.. note:: Code generated by sila2codegenerator 0.3.6

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.1.0"

# import general packages
import logging
import grpc

# meta packages
from typing import Union

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2
from sila2lib.error_handling.server_err import SiLAError, SiLAValidationError

# import gRPC modules for this feature
from .gRPC import SystemStatusProvider_pb2 as SystemStatusProvider_pb2
from .gRPC import SystemStatusProvider_pb2_grpc as SystemStatusProvider_pb2_grpc

# import simulation and real implementation
from .SystemStatusProvider_simulation import SystemStatusProviderSimulation
from .SystemStatusProvider_real import SystemStatusProviderReal



class SystemStatusProvider(SystemStatusProvider_pb2_grpc.SystemStatusProviderServicer):
    """
    Provides status information about the overall system
    """
    implementation: Union[SystemStatusProviderSimulation, SystemStatusProviderReal]
    simulation_mode: bool

    def __init__(self, simulation_mode: bool = True):
        """
        Class initialiser.

        :param simulation_mode: Sets whether at initialisation the simulation mode is active or the real mode.
        """

        self.simulation_mode = simulation_mode
        if simulation_mode:
            self.switch_to_simulation_mode()
        else:
            self.switch_to_real_mode()

    def _inject_implementation(self,
                               implementation: Union[SystemStatusProviderSimulation,
                                                     SystemStatusProviderReal]
                               ) -> bool:
        """
        Dependency injection of the implementation used.
            Allows to set the class used for simulation/real mode.

        :param implementation: A valid implementation of the SystemStatusProviderServicer.
        """

        self.implementation = implementation
        return True

    def switch_to_simulation_mode(self):
        """Method that will automatically be called by the server when the simulation mode is requested."""
        self.simulation_mode = True
        self._inject_implementation(SystemStatusProviderSimulation())

    def switch_to_real_mode(self):
        """Method that will automatically be called by the server when the real mode is requested."""
        self.simulation_mode = False
        self._inject_implementation(SystemStatusProviderReal())


    def Subscribe_SystemState(self, request, context: grpc.ServicerContext) \
            -> SystemStatusProvider_pb2.Subscribe_SystemState_Responses:
        """
        Requests the observable property System State
            The state of the system, i.e. if the system is operational or not. Operational means that the system can process Commands and that all Property values are read from the device. Non-operational means that the system is unable to process Commands (i.e. all Execution will result in errors) and that Property values are not read from the device and might have outdated values.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response stream with the following fields:
            SystemState (System State): The state of the system, i.e. if the system is operational or not. Operational means that the system can process Commands and that all Property values are read from the device. Non-operational means that the system is unable to process Commands (i.e. all Execution will result in errors) and that Property values are not read from the device and might have outdated values.
        """

        logging.debug(
            "Property SystemState requested in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
        try:
            return self.implementation.Subscribe_SystemState(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)



