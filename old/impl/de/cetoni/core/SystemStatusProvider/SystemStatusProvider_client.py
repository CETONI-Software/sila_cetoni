#!/usr/bin/env python3
"""
________________________________________________________________________

:PROJECT: SiLA2_python

*SystemStatusProvider client*

:details: SystemStatusProvider:
    Provides status information about the overall system

:file:    SystemStatusProvider_client.py
:authors: Florian Meinicke

:date: (creation)          2021-07-15T09:24:07.502130
:date: (last modification) 2021-07-15T09:24:07.502130

.. note:: Code generated by sila2codegenerator 0.3.6

_______________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""
__version__ = "0.1.0"

# import general packages
import logging
import argparse
import grpc
import time
import datetime

# import meta packages
from typing import Union, Optional

# import SiLA2 library modules
from sila2lib.framework import SiLAFramework_pb2 as silaFW_pb2
from sila2lib.sila_client import SiLA2Client
from sila2lib.framework.std_features import SiLAService_pb2 as SiLAService_feature_pb2
from sila2lib.error_handling import client_err
from sila2lib.error_handling.client_err import SiLAClientError
import sila2lib.utils.py2sila_types as p2s
#   Usually not needed, but - feel free to modify
# from sila2lib.framework.std_features import SimulationController_pb2 as SimController_feature_pb2

# import feature gRPC modules
# Import gRPC libraries of features
from .gRPC import SystemStatusProvider_pb2
from .gRPC import SystemStatusProvider_pb2_grpc
# import default arguments for this feature
from .SystemStatusProvider_default_arguments import default_dict as SystemStatusProvider_default_dict


# noinspection PyPep8Naming, PyUnusedLocal
class SystemStatusProviderClient:
    """
        Provides status information about the overall system

    .. note:: For an example on how to construct the parameter or read the response(s) for command calls and properties,
              compare the default dictionary that is stored in the directory of the corresponding feature.
    """
    # The following variables will be filled when run() is executed
    #: Storage for the connected servers version
    server_version: str = ''
    #: Storage for the display name of the connected server
    server_display_name: str = ''
    #: Storage for the description of the connected server
    server_description: str = ''

    def __init__(self,
                 channel = None):
        """Class initialiser"""

        # Create stub objects used to communicate with the server
        self.SystemStatusProvider_stub = \
            SystemStatusProvider_pb2_grpc.SystemStatusProviderStub(channel)


        # initialise class variables for server information storage
        self.server_version = ''
        self.server_display_name = ''
        self.server_description = ''



    def Subscribe_SystemState(self) \
            -> SystemStatusProvider_pb2.Subscribe_SystemState_Responses:
        """Wrapper to get property SystemState from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading observable property SystemState:")
        try:
            response = self.SystemStatusProvider_stub.Subscribe_SystemState(
                SystemStatusProvider_pb2.Subscribe_SystemState_Parameters()
            )
            logging.debug(
                'Subscribe_SystemState response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response


    #   No metadata defined

    @staticmethod
    def grpc_error_handling(error_object: grpc.Call) -> None:
        """Handles exceptions of type grpc.RpcError"""
        # pass to the default error handling
        grpc_error =  client_err.grpc_error_handling(error_object=error_object)

        logging.error(grpc_error.error_type)
        if hasattr(grpc_error.message, "parameter"):
            logging.error(grpc_error.message.parameter)
        logging.error(grpc_error.message.message)


