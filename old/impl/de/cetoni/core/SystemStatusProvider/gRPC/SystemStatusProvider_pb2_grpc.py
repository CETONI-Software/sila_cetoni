# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import SystemStatusProvider_pb2 as SystemStatusProvider__pb2


class SystemStatusProviderStub(object):
    """Feature: System Status Provider
    Provides information about the overall system, e.g. if the system is operational or not
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe_SystemState = channel.unary_stream(
                '/sila2.de.cetoni.core.systemstatusprovider.v1.SystemStatusProvider/Subscribe_SystemState',
                request_serializer=SystemStatusProvider__pb2.Subscribe_SystemState_Parameters.SerializeToString,
                response_deserializer=SystemStatusProvider__pb2.Subscribe_SystemState_Responses.FromString,
                )


class SystemStatusProviderServicer(object):
    """Feature: System Status Provider
    Provides information about the overall system, e.g. if the system is operational or not
    """

    def Subscribe_SystemState(self, request, context):
        """System State
        The state of the system, i.e. if the system is operational or not. Operational means that the system can process
        Commands and that all Property values are read from the device. Non-operational means that the system is unable to
        process Commands (i.e. all Execution will result in errors) and that Property values are not read from the device and
        might have outdated values.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SystemStatusProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Subscribe_SystemState': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_SystemState,
                    request_deserializer=SystemStatusProvider__pb2.Subscribe_SystemState_Parameters.FromString,
                    response_serializer=SystemStatusProvider__pb2.Subscribe_SystemState_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.de.cetoni.core.systemstatusprovider.v1.SystemStatusProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SystemStatusProvider(object):
    """Feature: System Status Provider
    Provides information about the overall system, e.g. if the system is operational or not
    """

    @staticmethod
    def Subscribe_SystemState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.core.systemstatusprovider.v1.SystemStatusProvider/Subscribe_SystemState',
            SystemStatusProvider__pb2.Subscribe_SystemState_Parameters.SerializeToString,
            SystemStatusProvider__pb2.Subscribe_SystemState_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
