# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import BalanceService_pb2 as BalanceService__pb2


class BalanceServiceStub(object):
    """Feature: Balance Service
    Provides an interface to a balance to read its current value and tare the balance if necessary
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Tare = channel.unary_unary(
                '/sila2.de.cetoni.balance.balanceservice.v1.BalanceService/Tare',
                request_serializer=BalanceService__pb2.Tare_Parameters.SerializeToString,
                response_deserializer=BalanceService__pb2.Tare_Responses.FromString,
                )
        self.Subscribe_Value = channel.unary_stream(
                '/sila2.de.cetoni.balance.balanceservice.v1.BalanceService/Subscribe_Value',
                request_serializer=BalanceService__pb2.Subscribe_Value_Parameters.SerializeToString,
                response_deserializer=BalanceService__pb2.Subscribe_Value_Responses.FromString,
                )


class BalanceServiceServicer(object):
    """Feature: Balance Service
    Provides an interface to a balance to read its current value and tare the balance if necessary
    """

    def Tare(self, request, context):
        """Tare
        Tare the balance
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_Value(self, request, context):
        """Value
        The current value
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BalanceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Tare': grpc.unary_unary_rpc_method_handler(
                    servicer.Tare,
                    request_deserializer=BalanceService__pb2.Tare_Parameters.FromString,
                    response_serializer=BalanceService__pb2.Tare_Responses.SerializeToString,
            ),
            'Subscribe_Value': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_Value,
                    request_deserializer=BalanceService__pb2.Subscribe_Value_Parameters.FromString,
                    response_serializer=BalanceService__pb2.Subscribe_Value_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.de.cetoni.balance.balanceservice.v1.BalanceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BalanceService(object):
    """Feature: Balance Service
    Provides an interface to a balance to read its current value and tare the balance if necessary
    """

    @staticmethod
    def Tare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.balance.balanceservice.v1.BalanceService/Tare',
            BalanceService__pb2.Tare_Parameters.SerializeToString,
            BalanceService__pb2.Tare_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_Value(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.balance.balanceservice.v1.BalanceService/Subscribe_Value',
            BalanceService__pb2.Subscribe_Value_Parameters.SerializeToString,
            BalanceService__pb2.Subscribe_Value_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
