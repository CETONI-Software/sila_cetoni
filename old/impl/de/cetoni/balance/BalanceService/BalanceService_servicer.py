"""
________________________________________________________________________

:PROJECT: SiLA2_python

*Balance Service*

:details: BalanceService:
    Provides an interface to a balance to read its current value and tare the balance if necessary

:file:    BalanceService_servicer.py
:authors: Florian Meinicke

:date: (creation)          2021-11-24T15:23:15.528558
:date: (last modification) 2021-11-24T15:23:15.528558

.. note:: Code generated by sila2codegenerator 0.3.7

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.1.0"

# import general packages
import logging
import grpc

# meta packages
from typing import Union

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2
from sila2lib.error_handling.server_err import SiLAError, SiLAValidationError

# import gRPC modules for this feature
from .gRPC import BalanceService_pb2 as BalanceService_pb2
from .gRPC import BalanceService_pb2_grpc as BalanceService_pb2_grpc

# import simulation and real implementation
from .BalanceService_simulation import BalanceServiceSimulation
from .BalanceService_real import BalanceServiceReal

from device_drivers.balance import BalanceInterface


class BalanceService(BalanceService_pb2_grpc.BalanceServiceServicer):
    """
    Allows to control a balance
    """
    implementation: Union[BalanceServiceSimulation, BalanceServiceReal]
    simulation_mode: bool

    def __init__(self, simulation_mode: bool = True, balance: BalanceInterface = None):
        """
        Class initialiser.

        :param simulation_mode: Sets whether at initialisation the simulation mode is active or the real mode.
        :param balance (optional): access to shared hardware interface, like serial interface.
        """

        self.balance = balance

        self.simulation_mode = simulation_mode
        if simulation_mode:
            self._inject_implementation(BalanceServiceSimulation())
        else:
            self._inject_implementation(BalanceServiceReal(balance=self.balance))

    def _inject_implementation(self,
                               implementation: Union[BalanceServiceSimulation,
                                                     BalanceServiceReal]
                               ) -> bool:
        """
        Dependency injection of the implementation used.
            Allows to set the class used for simulation/real mode.

        :param implementation: A valid implementation of the BalanceServicer.
        """

        self.implementation = implementation
        return True

    def switch_to_simulation_mode(self):
        """Method that will automatically be called by the server when the simulation mode is requested."""
        self.simulation_mode = True
        self._inject_implementation(BalanceServiceSimulation())

    def switch_to_real_mode(self):
        """Method that will automatically be called by the server when the real mode is requested."""
        self.simulation_mode = False
        self._inject_implementation(BalanceServiceReal(balance=self.balance))

    def Tare(self, request, context: grpc.ServicerContext) \
            -> BalanceService_pb2.Tare_Responses:
        """
        Executes the unobservable command "Tare"
            Tare the balance

        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        logging.debug(
            "Tare called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )

        # parameter validation
        # if request.my_paramameter.value out of scope :
        #        sila_val_err = SiLAValidationError(parameter="myParameter",
        #                                           msg=f"Parameter {request.my_parameter.value} out of scope!")
        #        sila_val_err.raise_rpc_error(context)

        try:
            return self.implementation.Tare(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)

    def Subscribe_Value(self, request, context: grpc.ServicerContext) \
            -> BalanceService_pb2.Subscribe_Value_Responses:
        """
        Requests the observable property Value
            The current value

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response stream with the following fields:
            request.Value (Value): The current value
        """

        logging.debug(
            "Property Value requested in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )
        try:
            return self.implementation.Subscribe_Value(request, context)
        except SiLAError as err:
            err.raise_rpc_error(context=context)

